(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('css-layout'), require('d3'), require('svg-innerhtml')) :
    typeof define === 'function' && define.amd ? define(['css-layout', 'd3', 'svg-innerhtml'], factory) :
    global.fc = factory(global.computeLayout,global.d3,global.svg_innerhtml);
}(this, function (computeLayout,d3,svg_innerhtml) { 'use strict';

    computeLayout = 'default' in computeLayout ? computeLayout['default'] : computeLayout;
    d3 = 'default' in d3 ? d3['default'] : d3;

    var _scale = {
        get isOrdinal () { return isOrdinal; },
        get range () { return range; },
        get setRange () { return setRange; }
    };

    var _fn = {
        get context () { return context; },
        get identity () { return identity; },
        get index () { return _index; },
        get noop () { return noop; }
    };

    // returns the width and height of the given element minus the padding.
    function innerDimensions(element) {
        var style = element.ownerDocument.defaultView.getComputedStyle(element);
        return {
            width: parseFloat(style.width) - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight),
            height: parseFloat(style.height) - parseFloat(style.paddingTop) - parseFloat(style.paddingBottom)
        };
    }

    function ownerSVGElement(node) {
        while (node.ownerSVGElement) {
            node = node.ownerSVGElement;
        }
        return node;
    }

    // parses the style attribute, converting it into a JavaScript object
    function parseStyle(style) {
        if (!style) {
            return {};
        }
        var properties = style.split(';');
        var json = {};
        properties.forEach(function(property) {
            var components = property.split(':');
            if (components.length === 2) {
                var name = components[0].trim();
                var value = components[1].trim();
                json[name] = isNaN(value) ? value : Number(value);
            }
        });
        return json;
    }

    // creates the structure required by the layout engine
    function createNodes(el) {
        function getChildNodes() {
            var children = [];
            for (var i = 0; i < el.childNodes.length; i++) {
                var child = el.childNodes[i];
                if (child.nodeType === 1) {
                    if (child.getAttribute('layout-style')) {
                        children.push(createNodes(child));
                    }
                }
            }
            return children;
        }
        return {
            style: parseStyle(el.getAttribute('layout-style')),
            children: getChildNodes(el),
            element: el
        };
    }

    // takes the result of layout and applied it to the SVG elements
    function applyLayout(node, subtree) {
        // don't set layout-width/height on layout root node
        if (subtree) {
            node.element.setAttribute('layout-width', node.layout.width);
            node.element.setAttribute('layout-height', node.layout.height);
        }

        node.element.setAttribute('layout-x', node.layout.left);
        node.element.setAttribute('layout-y', node.layout.top);

        var rectOrSvg = node.element.nodeName.match(/(?:svg|rect)/i);

        //for svg / rect set the dimensions via width/height properties
        if (rectOrSvg) {
            node.element.setAttribute('width', node.layout.width);
            node.element.setAttribute('height', node.layout.height);
        }

        //for non-root svg / rect set the offset via x/y properties
        if (rectOrSvg && subtree) {
            node.element.setAttribute('x', node.layout.left);
            node.element.setAttribute('y', node.layout.top);
        }

        // for all other non-root elements apply a transform
        if (!rectOrSvg && subtree) {
            node.element.setAttribute('transform',
                'translate(' + node.layout.left + ', ' + node.layout.top + ')');
        }

        node.children.forEach(function(childNode) {
            applyLayout(childNode, true);
        });
    }

    function computeDimensions(node) {
        if (node.hasAttribute('layout-width') && node.hasAttribute('layout-height')) {
            return {
                width: Number(node.getAttribute('layout-width')),
                height: Number(node.getAttribute('layout-height'))
            };
        } else {
            return innerDimensions(node);
        }
    }

    function computePosition(node) {
        if (node.hasAttribute('layout-x') && node.hasAttribute('layout-y')) {
            return {
                x: Number(node.getAttribute('layout-x')),
                y: Number(node.getAttribute('layout-y'))
            };
        } else {
            return { x: 0, y: 0 };
        }
    }

    function layout(node) {
        if (ownerSVGElement(node).__layout__ === 'suspended') {
            return;
        }

        var dimensions = computeDimensions(node);

        var position = computePosition(node);

        // create the layout nodes
        var layoutNodes = createNodes(node);

        // set the dimensions / position of the root
        layoutNodes.style.width = dimensions.width;
        layoutNodes.style.height = dimensions.height;
        layoutNodes.style.left = position.x;
        layoutNodes.style.top = position.y;

        // use the Facebook CSS goodness
        computeLayout(layoutNodes);

        // apply the resultant layout
        applyLayout(layoutNodes);
    }

    function layoutSuspended(x) {
        if (!arguments.length) {
            return Boolean(ownerSVGElement(this.node()).__layout__);
        }
        return this.each(function() {
            ownerSVGElement(this).__layout__ = x ? 'suspended' : '';
        });
    }

    d3.selection.prototype.layoutSuspended = layoutSuspended;
    d3.transition.prototype.layoutSuspended = layoutSuspended;

    function layoutSelection(name, value) {
        var argsLength = arguments.length;

        // For layout(string), return the lyout value for the first node
        if (argsLength === 1 && typeof name === 'string') {
            var node = this.node();
            return Number(node.getAttribute('layout-' + name));
        }

        // for all other invocations, iterate over each item in the selection
        return this.each(function() {
            if (argsLength === 2) {
                if (typeof name !== 'string') {
                    // layout(number, number) - sets the width and height and performs layout
                    this.setAttribute('layout-width', name);
                    this.setAttribute('layout-height', value);
                    layout(this);
                } else {
                    // layout(name, value) - sets a layout- attribute
                    this.setAttribute('layout-style', name + ':' + value);
                }
            } else if (argsLength === 1) {
                if (typeof name !== 'string') {
                    // layout(object) - sets the layout-style property to the given object
                    var currentStyle = parseStyle(this.getAttribute('layout-style'));
                    var styleDiff = name;
                    Object.keys(styleDiff)
                        .forEach(function(property) {
                            currentStyle[property] = styleDiff[property];
                        });
                    var layoutCss = Object.keys(currentStyle)
                        .map(function(property) {
                            return property + ':' + currentStyle[property];
                        })
                        .join(';');
                    this.setAttribute('layout-style', layoutCss);
                }
            } else if (argsLength === 0) {
                // layout() - executes layout
                layout(this);
            }
        });
    }

    d3.selection.prototype.layout = layoutSelection;
    d3.transition.prototype.layout = layoutSelection;

    function isIntersecting(a, b) {
        return !(a.x >= (b.x + b.width) ||
           (a.x + a.width) <= b.x ||
           a.y >= (b.y + b.height) ||
           (a.y + a.height) <= b.y);
    }

    function areaOfIntersection(a, b) {
        var left = Math.max(a.x, b.x);
        var right = Math.min(a.x + a.width, b.x + b.width);
        var top = Math.max(a.y, b.y);
        var bottom = Math.min(a.y + a.height, b.y + b.height);
        return (right - left) * (bottom - top);
    }

    function collidingWith(rectangles, index) {
        var rectangle = rectangles[index];

        // Filter all rectangles that aren't the selected rectangle
        // and the filter if they intersect.
        return rectangles.filter(function(_, i) {
            return index !== i;
        }).filter(function(d) {
            return isIntersecting(d, rectangle);
        });
    }

    function collisionArea(rectangles, index) {
        var rectangle = rectangles[index];
        var collisions = collidingWith(rectangles, index);

        return d3.sum(collisions.map(function(d) {
            return areaOfIntersection(rectangle, d);
        }));
    }

    function totalCollisionArea(rectangles) {
        return d3.sum(rectangles.map(function(_, i) {
            return collisionArea(rectangles, i);
        }));
    }

    function minimum(data, accessor) {
        return data.map(function(dataPoint) {
            return [accessor(dataPoint), dataPoint];
        }).reduce(function(accumulator, dataPoint) {
            return accumulator[0] > dataPoint[0] ? dataPoint : accumulator;
        }, [Number.MAX_VALUE, null])[1];
    }

    function getAllPlacements(label) {
        var x = label.x;
        var y = label.y;
        var width = label.width;
        var height = label.height;
        return [
            getPlacement(x, y, width, height), // Same location
            getPlacement(x - width, y, width, height), // Left
            getPlacement(x - width, y - height, width, height), // Up, left
            getPlacement(x, y - height, width, height), // Up
            getPlacement(x, y - height / 2, width, height), // Half up
            getPlacement(x - width / 2, y, width, height), // Half left
            getPlacement(x - width, y - height / 2, width, height), // Full left, half up
            getPlacement(x - width / 2, y - height, width, height) // Full up, half left
        ];
    }

    function getPlacement(x, y, width, height) {
        return {
            x: x,
            y: y,
            width: width,
            height: height
        };
    }

    function containerUtils() {
        var containerWidth = 0,
            containerHeight = 0;

        var container = function(point) {
            return !(point.x < 0 || point.y < 0 ||
                point.x > containerWidth || point.y > containerHeight ||
                (point.x + point.width) > containerWidth ||
                (point.y + point.height) > containerHeight);
        };

        container.containerWidth = function(value) {
            if (!arguments.length) {
                return containerWidth;
            }
            containerWidth = value;
            return container;
        };

        container.containerHeight = function(value) {
            if (!arguments.length) {
                return containerHeight;
            }
            containerHeight = value;
            return container;
        };

        return container;
    }

    function local() {

        var container = containerUtils();
        var iterations = 1;

        var strategy = function(data) {

            var originalData = data;
            var iteratedData = data;

            var thisIterationScore = Number.MAX_VALUE;
            var lastIterationScore = Infinity;
            var iteration = 0;

            // Keep going until there's no more iterations to do or
            // the solution is a local minimum
            while (iteration < iterations && thisIterationScore < lastIterationScore) {
                lastIterationScore = thisIterationScore;

                iteratedData = iterate(originalData, iteratedData);

                thisIterationScore = totalCollisionArea(iteratedData);
                iteration++;
            }
            return iteratedData;
        };

        strategy.iterations = function(i) {
            if (!arguments.length) {
                return iterations;
            }

            iterations = i;
            return strategy;
        };

        function iterate(originalData, iteratedData) {

            // Find rectangles with collisions or are outside of the bounds of the container
            iteratedData.map(function(d, i) {
                return [d, i];
            }).filter(function(d, i) {
                return collidingWith(iteratedData, d[1]).length || !container(d[0]);
            }).forEach(function(d) {

                // Use original data to stop wandering rectangles with each iteration
                var placements = getAllPlacements(originalData[d[1]]);

                // Create different states the algorithm could transition to
                var candidateReplacements = placements.map(function(placement) {
                    var clone = iteratedData.slice();
                    clone[d[1]] = placement;
                    return clone;
                });

                // Choose the best state.
                var bestPlacement = minimum(candidateReplacements, function(placement) {
                    var areaOfCollisions = collisionArea(placement, d[1]);
                    var isOnScreen = container(placement[d[1]]);
                    return areaOfCollisions + (isOnScreen ? 0 : Number.MAX_VALUE);
                });

                iteratedData = bestPlacement;
            });
            return iteratedData;
        }

        d3.rebind(strategy, container, 'containerWidth');
        d3.rebind(strategy, container, 'containerHeight');

        return strategy;
    }

    function greedy() {

        var container = containerUtils();

        var strategy = function(data) {
            var builtPoints = [];

            data.forEach(function(point) {
                var allPointPlacements = getAllPlacements(point);
                var candidateReplacements = allPointPlacements.map(function(placement) {
                    return getCandidateReplacement(builtPoints, placement);
                });

                builtPoints = minimum(candidateReplacements, scorer);
            });

            return builtPoints;
        };

        d3.rebind(strategy, container, 'containerWidth');
        d3.rebind(strategy, container, 'containerHeight');

        function getCandidateReplacement(allPoints, point) {
            var allPointsCopy = allPoints.slice();
            allPointsCopy.push(point);

            return allPointsCopy;
        }

        function scorer(placement) {
            var areaOfCollisions = totalCollisionArea(placement);
            var isOnScreen = true;
            for (var i = 0; i < placement.length && isOnScreen; i++) {
                var point = placement[i];
                isOnScreen = container(point);
            }
            return areaOfCollisions + (isOnScreen ? 0 : Infinity);
        }

        return strategy;
    }

    function boundingBox() {

        var containerWidth = 1,
            containerHeight = 1;

        var strategy = function(data) {
            return data.map(function(d, i) {

                var tx = d.x, ty = d.y;
                if (tx + d.width > containerWidth) {
                    tx -= d.width;
                }

                if (ty + d.height > containerHeight) {
                    ty -= d.height;
                }
                return {x: tx, y: ty};
            });
        };

        strategy.containerWidth = function(value) {
            if (!arguments.length) {
                return containerWidth;
            }
            containerWidth = value;
            return strategy;
        };

        strategy.containerHeight = function(value) {
            if (!arguments.length) {
                return containerHeight;
            }
            containerHeight = value;
            return strategy;
        };

        return strategy;
    }

    var strategy = {
        boundingBox: boundingBox,
        greedy: greedy,
        local: local
    };

    // applies the d3.functor to each element of an array, allowing a mixed
    // of functions and constants, e.g.
    // [0, function(d) { return d.foo; }]
    function functoredArray(x) {
        var functoredItems = x.map(function(item) {
            return d3.functor(item);
        });
        return function(d, i) {
            return functoredItems.map(function(j) {
                return j(d, i);
            });
        };
    }

    /**
     * An overload of the d3.rebind method which allows the source methods
     * to be rebound to the target with a different name. In the mappings object
     * keys represent the target method names and values represent the source
     * object names.
     */
    function rebind(target, source, mappings) {
        if (typeof(mappings) !== 'object') {
            return d3.rebind.apply(d3, arguments);
        }
        Object.keys(mappings)
            .forEach(function(targetName) {
                var method = source[mappings[targetName]];
                if (typeof method !== 'function') {
                    throw new Error('The method ' + mappings[targetName] + ' does not exist on the source object');
                }
                target[targetName] = function() {
                    var value = method.apply(source, arguments);
                    return value === source ? target : value;
                };
            });
        return target;
    }

    function capitalizeFirstLetter(str) {
        return str[0].toUpperCase() + str.slice(1);
    }

    /**
     * Rebinds all the methods from the source component, adding the given prefix. An
     * optional exclusions parameter can be used to specify methods which should not
     * be rebound.
     */
    function rebindAll(target, source, prefix, exclusions) {
        prefix = typeof prefix !== 'undefined' ? prefix : '';

        // if exclusions isn't an array, construct it
        if (!(arguments.length === 4 && Array.isArray(exclusions))) {
            exclusions = Array.prototype.slice.call(arguments, 3);
        }

        exclusions = exclusions.map(function(exclusion) {
            if (typeof(exclusion) === 'string') {
                if (!source.hasOwnProperty(exclusion)) {
                    throw new Error('The method ' + exclusion + ' does not exist on the source object');
                }
                exclusion = new RegExp('^' + exclusion + '$');
            }
            return exclusion;
        });

        function exclude(testedProperty) {
            return exclusions.some(function(exclusion) {
                return testedProperty.match(exclusion);
            });
        }

        function reboundPropertyName(inputProperty) {
            return prefix !== '' ? prefix + capitalizeFirstLetter(inputProperty) : inputProperty;
        }

        var bindings = {};
        for (var property in source) {
            if (source.hasOwnProperty(property) && !exclude(property)) {
                bindings[reboundPropertyName(property)] = property;
            }
        }

        rebind(target, source, bindings);
    }

    function isOrdinal(scale) {
        return scale.rangeExtent;
    }

    // ordinal axes have a rangeExtent function, this adds any padding that
    // was applied to the range. This functions returns the rangeExtent
    // if present, or range otherwise
    ///
    // NOTE: d3 uses very similar logic here:
    // https://github.com/mbostock/d3/blob/5b981a18db32938206b3579248c47205ecc94123/src/scale/scale.js#L8
    function range(scale) {
        // for non ordinal, simply return the range
        if (!isOrdinal(scale)) {
            return scale.range();
        }

        // For ordinal, use the rangeExtent. However, rangeExtent always provides
        // a non inverted range (i.e. extent[0] < extent[1]) regardless of the
        // range set on the scale. The logic below detects the inverted case.
        //
        // The d3 code that tackles the same issue doesn't have to deal with the inverted case.
        var scaleRange = scale.range();
        var extent = scale.rangeExtent();
        if (scaleRange.length <= 1) {
            // we cannot detect the inverted case if the range (and domain) has
            // a single item in it.
            return extent;
        }

        var inverted = scaleRange[0] > scaleRange[1];
        return inverted ? [extent[1], extent[0]] : extent;
    }

    // Ordinal and quantitative scales have different methods for setting the range. This
    // function detects the scale type and sets the range accordingly.
    function setRange(scale, scaleRange) {
        if (isOrdinal(scale)) {
            scale.rangePoints(scaleRange, 1);
        } else {
            scale.range(scaleRange);
        }
    }

    function context() {
        return this;
    }

    function identity(d) {
        return d;
    }

    function _index(d, i) {
        return i;
    }

    function noop(d) {}

    // "Caution: avoid interpolating to or from the number zero when the interpolator is used to generate
    // a string (such as with attr).
    // Very small values, when stringified, may be converted to scientific notation and
    // cause a temporarily invalid attribute or style property value.
    // For example, the number 0.0000001 is converted to the string "1e-7".
    // This is particularly noticeable when interpolating opacity values.
    // To avoid scientific notation, start or end the transition at 1e-6,
    // which is the smallest value that is not stringified in exponential notation."
    // - https://github.com/mbostock/d3/wiki/Transitions#d3_interpolateNumber
    var effectivelyZero = 1e-6;

    // Wrapper around d3's selectAll/data data-join, which allows decoration of the result.
    // This is achieved by appending the element to the enter selection before exposing it.
    // A default transition of fade in/out is also implicitly added but can be modified.

    function dataJoinUtil() {
        var selector = 'g',
            children = false,
            element = 'g',
            attr = {},
            key = _index;

        var dataJoin = function(container, data) {

            var joinedData = data || identity;

            // Can't use instanceof d3.selection (see #458)
            if (!(container.selectAll && container.node)) {
                container = d3.select(container);
            }

            // update
            var selection = container.selectAll(selector);
            if (children) {
                // in order to support nested selections, they can be filtered
                // to only return immediate children of the container
                selection = selection.filter(function() {
                    return this.parentNode === container.node();
                });
            }
            var updateSelection = selection.data(joinedData, key);

            // enter
            // when container is a transition, entering elements fade in (from transparent to opaque)
            // N.B. insert() is used to create new elements, rather than append(). insert() behaves in a special manner
            // on enter selections - entering elements will be inserted immediately before the next following sibling
            // in the update selection, if any.
            // This helps order the elements in an order consistent with the data, but doesn't guarantee the ordering;
            // if the updating elements change order then selection.order() would be required to update the order.
            // (#528)
            var enterSelection = updateSelection.enter()
                .insert(element) // <<<--- this is the secret sauce of this whole file
                .attr(attr)
                .style('opacity', effectivelyZero);

            // exit
            // when container is a transition, exiting elements fade out (from opaque to transparent)
            var exitSelection = d3.transition(updateSelection.exit())
                .style('opacity', effectivelyZero)
                .remove();

            // when container is a transition, all properties of the transition (which can be interpolated)
            // will transition
            updateSelection = d3.transition(updateSelection)
                .style('opacity', 1);

            updateSelection.enter = d3.functor(enterSelection);
            updateSelection.exit = d3.functor(exitSelection);
            return updateSelection;
        };

        dataJoin.selector = function(x) {
            if (!arguments.length) {
                return selector;
            }
            selector = x;
            return dataJoin;
        };
        dataJoin.children = function(x) {
            if (!arguments.length) {
                return children;
            }
            children = x;
            return dataJoin;
        };
        dataJoin.element = function(x) {
            if (!arguments.length) {
                return element;
            }
            element = x;
            return dataJoin;
        };
        dataJoin.attr = function(x) {
            if (!arguments.length) {
                return attr;
            }

            if (arguments.length === 1) {
                attr = arguments[0];
            } else if (arguments.length === 2) {
                var dataKey = arguments[0];
                var value = arguments[1];

                attr[dataKey] = value;
            }

            return dataJoin;
        };
        dataJoin.key = function(x) {
            if (!arguments.length) {
                return key;
            }
            key = x;
            return dataJoin;
        };

        return dataJoin;
    }

    function _rectangles(layoutStrategy) {

        var size = d3.functor([0, 0]),
            position = function(d, i) { return [d.x, d.y]; };

        var xScale = d3.scale.identity(),
            yScale = d3.scale.identity(),
            anchor = noop,
            strategy = layoutStrategy || identity,
            component = noop;

        var dataJoin = dataJoinUtil()
            .selector('g.rectangle')
            .element('g')
            .attr('class', 'rectangle');

        var rectangles = function(selection) {

            var xRange = range(xScale),
                yRange = range(yScale);

            if (strategy.containerWidth) {
                strategy.containerWidth(Math.max(xRange[0], xRange[1]));
            }
            if (strategy.containerHeight) {
                strategy.containerHeight(Math.max(yRange[0], yRange[1]));
            }

            selection.each(function(data, index) {
                var g = dataJoin(this, data);

                // obtain the rectangular bounding boxes for each child
                var childRects = data.map(function(d, i) {
                    var childPos = position(d, i);
                    var childSize = size(d, i);
                    return {
                        x: childPos[0],
                        y: childPos[1],
                        width: childSize[0],
                        height: childSize[1]
                    };
                });

                // apply the strategy to derive the layout
                var layout = strategy(childRects);

                // offset each rectangle accordingly
                g.attr('transform', function(d, i) {
                    var offset = layout[i];
                    return 'translate(' + offset.x + ', ' + offset.y + ')';
                });

                data.forEach(function(d, i) {
                    var pos = position(d, i);
                    anchor(i, pos[0] - layout[i].x, pos[1] - layout[i].y);
                });

                // set the layout width / height so that children can use SVG layout if required
                g.attr({
                    'layout-width': function(d, i) { return childRects[i].width; },
                    'layout-height': function(d, i) { return childRects[i].height; }
                });

                g.call(component);
            });
        };

        rebindAll(rectangles, strategy);

        rectangles.size = function(x) {
            if (!arguments.length) {
                return size;
            }
            size = functoredArray(x);
            return rectangles;
        };

        rectangles.position = function(x) {
            if (!arguments.length) {
                return position;
            }
            position = functoredArray(x);
            return rectangles;
        };

        rectangles.anchor = function(x) {
            if (!arguments.length) {
                return anchor;
            }
            anchor = x;
            return rectangles;
        };

        rectangles.xScale = function(value) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = value;
            return rectangles;
        };

        rectangles.yScale = function(value) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = value;
            return rectangles;
        };

        rectangles.component = function(value) {
            if (!arguments.length) {
                return component;
            }
            component = value;
            return rectangles;
        };

        return rectangles;
    }

    var _layout = {
        rectangles: _rectangles,
        strategy: strategy
    };

    /* global requestAnimationFrame:false */

    // Debounce render to only occur once per frame
    function render(renderInternal) {
        var rafId = null;
        return function() {
            if (rafId == null) {
                rafId = requestAnimationFrame(function() {
                    rafId = null;
                    renderInternal();
                });
            }
        };
    }

    function noSnap(xScale, yScale) {
        return function(xPixel, yPixel) {
            return {
                x: xPixel,
                y: yPixel
            };
        };
    }

    function pointSnap(xScale, yScale, xValue, yValue, data, objectiveFunction) {
        // a default function that computes the distance between two points
        objectiveFunction = objectiveFunction || function(x, y, cx, cy) {
            var dx = x - cx,
                dy = y - cy;
            return dx * dx + dy * dy;
        };

        return function(xPixel, yPixel) {
            var nearest = data.map(function(d) {
                var diff = objectiveFunction(xPixel, yPixel, xScale(xValue(d)), yScale(yValue(d)));
                return [diff, d];
            })
            .reduce(function(accumulator, value) {
                return accumulator[0] > value[0] ? value : accumulator;
            }, [Number.MAX_VALUE, null])[1];

            return {
                datum: nearest,
                x: nearest ? xScale(xValue(nearest)) : xPixel,
                y: nearest ? yScale(yValue(nearest)) : yPixel
            };
        };
    }

    function seriesPointSnap(series, data, objectiveFunction) {
        return function(xPixel, yPixel) {
            var xScale = series.xScale(),
                yScale = series.yScale(),
                xValue = series.xValue(),
                yValue = (series.yValue || series.yCloseValue).call(series);
            return pointSnap(xScale, yScale, xValue, yValue, data, objectiveFunction)(xPixel, yPixel);
        };
    }

    function seriesPointSnapXOnly(series, data) {
        function objectiveFunction(x, y, cx, cy) {
            var dx = x - cx;
            return Math.abs(dx);
        }
        return seriesPointSnap(series, data, objectiveFunction);
    }

    function seriesPointSnapYOnly(series, data) {
        function objectiveFunction(x, y, cx, cy) {
            var dy = y - cy;
            return Math.abs(dy);
        }
        return seriesPointSnap(series, data, objectiveFunction);
    }

    // the barWidth property of the various series takes a function which, when given an
    // array of x values, returns a suitable width. This function creates a width which is
    // equal to the smallest distance between neighbouring datapoints multiplied
    // by the given factor
    function fractionalBarWidth(fraction) {

        return function(pixelValues) {
            // return some default value if there are not enough datapoints to compute the width
            if (pixelValues.length <= 1) {
                return 10;
            }

            pixelValues.sort();

            // compute the distance between neighbouring items
            var neighbourDistances = d3.pairs(pixelValues)
                .map(function(tuple) {
                    return Math.abs(tuple[0] - tuple[1]);
                });

            var minDistance = d3.min(neighbourDistances);
            return fraction * minDistance;
        };
    }

    /**
     * The extent function enhances the functionality of the equivalent D3 extent function, allowing
     * you to pass an array of fields, or accessors, which will be used to derive the extent of the supplied array. For
     * example, if you have an array of items with properties of 'high' and 'low', you
     * can use <code>fc.util.extent().fields(['high', 'low'])(data)</code> to compute the extent of your data.
     *
     * @memberof fc.util
     */
    function extent() {

        var fields = [],
            extraPoint = null,
            padding = 0,
            symmetricalAbout = null;

        /**
        * @param {array} data an array of data points, or an array of arrays of data points
        */
        var extents = function(data) {

            // we need an array of arrays if we don't have one already
            if (!Array.isArray(data[0])) {
                data = [data];
            }

            // the fields can be a mixed array of property names or accessor functions
            fields = fields.map(function(field) {
                if (typeof field !== 'string') {
                    return field;
                }
                return function(d) {
                    return d[field];
                };
            });

            var dataMin = d3.min(data, function(d0) {
                return d3.min(d0, function(d1) {
                    return d3.min(fields.map(function(f) {
                        return f(d1);
                    }));
                });
            });

            var dataMax = d3.max(data, function(d0) {
                return d3.max(d0, function(d1) {
                    return d3.max(fields.map(function(f) {
                        return f(d1);
                    }));
                });
            });

            var dateExtent = Object.prototype.toString.call(dataMin) === '[object Date]';

            var min = dateExtent ? dataMin.getTime() : dataMin;
            var max = dateExtent ? dataMax.getTime() : dataMax;

            // apply symmetry rules
            if (symmetricalAbout != null) {
                var symmetrical = dateExtent ? symmetricalAbout.getTime() : symmetricalAbout;
                var distanceFromMax = Math.abs(max - symmetrical),
                    distanceFromMin = Math.abs(min - symmetrical),
                    halfRange = Math.max(distanceFromMax, distanceFromMin);

                min = symmetrical - halfRange;
                max = symmetrical + halfRange;
            }

            // pad
            if (Array.isArray(padding)) {
                var deltaArray = [padding[0] * (max - min), padding[1] * (max - min)];
                min -= deltaArray[0];
                max += deltaArray[1];
            } else {
                var delta = padding * (max - min) / 2;
                min -= delta;
                max += delta;
            }

            // Include the specified point in the range
            if (extraPoint !== null) {
                if (extraPoint < min) {
                    min = extraPoint;
                } else if (extraPoint > max) {
                    max = extraPoint;
                }
            }

            if (dateExtent) {
                min = new Date(min);
                max = new Date(max);
            }

            // Return the smallest and largest
            return [min, max];
        };

        /*
        * @param {array} fields the names of object properties that represent field values, or accessor functions.
        */
        extents.fields = function(x) {
            if (!arguments.length) {
                return fields;
            }

            // the fields parameter must be an array of field names,
            // but we can pass non-array types in
            if (!Array.isArray(x)) {
                x = [x];
            }

            fields = x;
            return extents;
        };

        extents.include = function(x) {
            if (!arguments.length) {
                return extraPoint;
            }
            extraPoint = x;
            return extents;
        };

        extents.pad = function(x) {
            if (!arguments.length) {
                return padding;
            }
            padding = x;
            return extents;
        };

        extents.symmetricalAbout = function(x) {
            if (!arguments.length) {
                return symmetricalAbout;
            }
            symmetricalAbout = x;
            return extents;
        };

        return extents;
    }

    // A rectangle is an object with top, left, bottom and right properties. Component
    // margin or padding properties can accept an integer, which is converted to a rectangle where each
    // property equals the given value. Also, a margin / padding may have properties missing, in
    // which case they default to zero.
    // This function expand an integer to a rectangle and fills missing properties.
    function expandRect(margin) {
        var expandedRect = margin;
        if (typeof(expandedRect) === 'number') {
            expandedRect = {
                top: margin,
                bottom: margin,
                left: margin,
                right: margin
            };
        }
        ['top', 'bottom', 'left', 'right'].forEach(function(direction) {
            if (!expandedRect[direction]) {
                expandedRect[direction] = 0;
            }
        });
        return expandedRect;
    }

    var util = {
        dataJoin: dataJoinUtil,
        expandRect: expandRect,
        extent: extent,
        fn: _fn,
        minimum: minimum,
        fractionalBarWidth: fractionalBarWidth,
        innerDimensions: innerDimensions,
        rebind: rebind,
        rebindAll: rebindAll,
        scale: _scale,
        noSnap: noSnap,
        pointSnap: pointSnap,
        seriesPointSnap: seriesPointSnap,
        seriesPointSnapXOnly: seriesPointSnapXOnly,
        seriesPointSnapYOnly: seriesPointSnapYOnly,
        render: render,
        arrayFunctor: functoredArray
    };

    function measure() {

        var event = d3.dispatch('measuresource', 'measuretarget', 'measureclear'),
            xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            snap = function(_x, _y) {
                return noSnap(xScale, yScale)(_x, _y);
            },
            decorate = noop,
            xLabel = d3.functor(''),
            yLabel = d3.functor(''),
            padding = d3.functor(2);

        var x = function(d) { return d.x; },
            y = function(d) { return d.y; };

        var dataJoin = dataJoinUtil()
            .selector('g.measure')
            .element('g')
            .attr('class', 'measure');

        var measure = function(selection) {

            selection.each(function(data, index) {

                var container = d3.select(this)
                    .style('pointer-events', 'all')
                    .on('mouseenter.measure', mouseenter);

                var overlay = container.selectAll('rect')
                    .data([data]);

                overlay.enter()
                    .append('rect')
                    .style('visibility', 'hidden');

                container.select('rect')
                    .attr('x', xScale.range()[0])
                    .attr('y', yScale.range()[1])
                    .attr('width', xScale.range()[1])
                    .attr('height', yScale.range()[0]);

                var g = dataJoin(container, data);

                var enter = g.enter();
                enter.append('line')
                    .attr('class', 'tangent');
                enter.append('line')
                    .attr('class', 'horizontal');
                enter.append('line')
                    .attr('class', 'vertical');
                enter.append('text')
                    .attr('class', 'horizontal');
                enter.append('text')
                    .attr('class', 'vertical');

                g.select('line.tangent')
                    .attr('x1', function(d) { return x(d.source); })
                    .attr('y1', function(d) { return y(d.source); })
                    .attr('x2', function(d) { return x(d.target); })
                    .attr('y2', function(d) { return y(d.target); });

                g.select('line.horizontal')
                    .attr('x1', function(d) { return x(d.source); })
                    .attr('y1', function(d) { return y(d.source); })
                    .attr('x2', function(d) { return x(d.target); })
                    .attr('y2', function(d) { return y(d.source); })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; });

                g.select('line.vertical')
                    .attr('x1', function(d) { return x(d.target); })
                    .attr('y1', function(d) { return y(d.target); })
                    .attr('x2', function(d) { return x(d.target); })
                    .attr('y2', function(d) { return y(d.source); })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; });

                var paddingValue = padding.apply(this, arguments);

                g.select('text.horizontal')
                    .attr('x', function(d) { return x(d.source) + (x(d.target) - x(d.source)) / 2; })
                    .attr('y', function(d) { return y(d.source) - paddingValue; })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; })
                    .text(xLabel);

                g.select('text.vertical')
                    .attr('x', function(d) { return x(d.target) + paddingValue; })
                    .attr('y', function(d) { return y(d.source) + (y(d.target) - y(d.source)) / 2; })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; })
                    .text(yLabel);

                decorate(g, data, index);
            });
        };

        function updatePositions() {
            var container = d3.select(this);
            var datum = container.datum()[0];
            if (datum.state !== 'DONE') {
                var mouse = d3.mouse(this);
                var snapped = snap.apply(this, mouse);
                if (datum.state === 'SELECT_SOURCE') {
                    datum.source = datum.target = snapped;
                } else if (datum.state === 'SELECT_TARGET') {
                    datum.target = snapped;
                } else {
                    throw new Error('Unknown state ' + datum.state);
                }
            }
        }

        function mouseenter() {
            var container = d3.select(this)
                .on('click.measure', mouseclick)
                .on('mousemove.measure', mousemove)
                .on('mouseleave.measure', mouseleave);
            var data = container.datum();
            if (data[0] == null) {
                data.push({
                    state: 'SELECT_SOURCE'
                });
            }
            updatePositions.call(this);
            container.call(measure);
        }

        function mousemove() {
            var container = d3.select(this);
            updatePositions.call(this);
            container.call(measure);
        }

        function mouseleave() {
            var container = d3.select(this);
            var data = container.datum();
            if (data[0] != null && data[0].state === 'SELECT_SOURCE') {
                data.pop();
            }
            container.on('click.measure', null)
                .on('mousemove.measure', null)
                .on('mouseleave.measure', null);
        }

        function mouseclick() {
            var container = d3.select(this);
            var datum = container.datum()[0];
            switch (datum.state) {
            case 'SELECT_SOURCE':
                updatePositions.call(this);
                event.measuresource.apply(this, arguments);
                datum.state = 'SELECT_TARGET';
                break;
            case 'SELECT_TARGET':
                updatePositions.call(this);
                event.measuretarget.apply(this, arguments);
                datum.state = 'DONE';
                break;
            case 'DONE':
                event.measureclear.apply(this, arguments);
                datum.state = 'SELECT_SOURCE';
                updatePositions.call(this);
                break;
            default:
                throw new Error('Unknown state ' + datum.state);
            }
            container.call(measure);
        }

        measure.xScale = function(_x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = _x;
            return measure;
        };
        measure.yScale = function(_x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = _x;
            return measure;
        };
        measure.snap = function(_x) {
            if (!arguments.length) {
                return snap;
            }
            snap = _x;
            return measure;
        };
        measure.decorate = function(_x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = _x;
            return measure;
        };
        measure.xLabel = function(_x) {
            if (!arguments.length) {
                return xLabel;
            }
            xLabel = d3.functor(_x);
            return measure;
        };
        measure.yLabel = function(_x) {
            if (!arguments.length) {
                return yLabel;
            }
            yLabel = d3.functor(_x);
            return measure;
        };
        measure.padding = function(_x) {
            if (!arguments.length) {
                return padding;
            }
            padding = d3.functor(_x);
            return measure;
        };

        d3.rebind(measure, event, 'on');

        return measure;
    }

    function _container() {

        var padding = 0,
            component = noop,
            decorate = noop;

        var dataJoin = dataJoinUtil()
            .selector('g.container')
            .element('g')
            .attr({
                'class': 'container',
                'layout-style': 'flex: 1'
            });

        var container = function(selection) {
            selection.each(function(data, index) {
                var expandedPadding = expandRect(padding);

                var g = dataJoin(this, [data]);

                g.enter()
                    .append('rect')
                    .layout('flex', 1);

                g.enter()
                    .append('g')
                    .layout({
                        position: 'absolute',
                        top: expandedPadding.top,
                        left: expandedPadding.left,
                        bottom: expandedPadding.bottom,
                        right: expandedPadding.right
                    });

                d3.select(this).layout();

                g.select('g').call(component);

                decorate(g, data, index);
            });
        };

        container.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return container;
        };

        container.padding = function(x) {
            if (!arguments.length) {
                return padding;
            }
            padding = x;
            return container;
        };

        container.component = function(x) {
            if (!arguments.length) {
                return component;
            }
            component = x;
            return container;
        };

        return container;
    }

    function fibonacciFan() {

        var event = d3.dispatch('fansource', 'fantarget', 'fanclear'),
            xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            snap = function(_x, _y) {
                return noSnap(xScale, yScale)(_x, _y);
            },
            decorate = noop;

        var x = function(d) { return d.x; },
            y = function(d) { return d.y; };

        var dataJoin = dataJoinUtil()
            .selector('g.fan')
            .element('g')
            .attr('class', 'fan');

        var fan = function(selection) {

            selection.each(function(data, index) {

                var container = d3.select(this)
                    .style('pointer-events', 'all')
                    .on('mouseenter.fan', mouseenter);

                var overlay = container.selectAll('rect')
                    .data([data]);

                overlay.enter()
                    .append('rect')
                    .style('visibility', 'hidden');

                container.select('rect')
                    .attr('x', xScale.range()[0])
                    .attr('y', yScale.range()[1])
                    .attr('width', xScale.range()[1])
                    .attr('height', yScale.range()[0]);

                var g = dataJoin(container, data);

                g.each(function(d) {
                    d.x = xScale.range()[1];
                    d.ay = d.by = d.cy = y(d.target);

                    if (x(d.source) !== x(d.target)) {

                        if (d.state === 'DONE' && x(d.source) > x(d.target)) {
                            var temp = d.source;
                            d.source = d.target;
                            d.target = temp;
                        }

                        var gradient = (y(d.target) - y(d.source)) /
                            (x(d.target) - x(d.source));
                        var deltaX = d.x - x(d.source);
                        var deltaY = gradient * deltaX;
                        d.ay = 0.618 * deltaY + y(d.source);
                        d.by = 0.500 * deltaY + y(d.source);
                        d.cy = 0.382 * deltaY + y(d.source);
                    }
                });

                var enter = g.enter();
                enter.append('line')
                    .attr('class', 'trend');
                enter.append('line')
                    .attr('class', 'a');
                enter.append('line')
                    .attr('class', 'b');
                enter.append('line')
                    .attr('class', 'c');
                enter.append('polygon')
                    .attr('class', 'area');

                g.select('line.trend')
                    .attr('x1', function(d) { return x(d.source); })
                    .attr('y1', function(d) { return y(d.source); })
                    .attr('x2', function(d) { return x(d.target); })
                    .attr('y2', function(d) { return y(d.target); });

                g.select('line.a')
                    .attr('x1', function(d) { return x(d.source); })
                    .attr('y1', function(d) { return y(d.source); })
                    .attr('x2', function(d) { return d.x; })
                    .attr('y2', function(d) { return d.ay; })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; });

                g.select('line.b')
                    .attr('x1', function(d) { return x(d.source); })
                    .attr('y1', function(d) { return y(d.source); })
                    .attr('x2', function(d) { return d.x; })
                    .attr('y2', function(d) { return d.by; })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; });

                g.select('line.c')
                    .attr('x1', function(d) { return x(d.source); })
                    .attr('y1', function(d) { return y(d.source); })
                    .attr('x2', function(d) { return d.x; })
                    .attr('y2', function(d) { return d.cy; })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; });

                g.select('polygon.area')
                    .attr('points', function(d) {
                        return x(d.source) + ',' + y(d.source) + ' ' +
                            d.x + ',' + d.ay + ' ' +
                            d.x + ',' + d.cy;
                    })
                    .style('visibility', function(d) { return d.state !== 'DONE' ? 'hidden' : 'visible'; });

                decorate(g, data, index);
            });
        };

        function updatePositions() {
            var container = d3.select(this);
            var datum = container.datum()[0];
            if (datum.state !== 'DONE') {
                var mouse = d3.mouse(this);
                var snapped = snap.apply(this, mouse);
                if (datum.state === 'SELECT_SOURCE') {
                    datum.source = datum.target = snapped;
                } else if (datum.state === 'SELECT_TARGET') {
                    datum.target = snapped;
                } else {
                    throw new Error('Unknown state ' + datum.state);
                }
            }
        }

        function mouseenter() {
            var container = d3.select(this)
                .on('click.fan', mouseclick)
                .on('mousemove.fan', mousemove)
                .on('mouseleave.fan', mouseleave);
            var data = container.datum();
            if (data[0] == null) {
                data.push({
                    state: 'SELECT_SOURCE'
                });
            }
            updatePositions.call(this);
            container.call(fan);
        }

        function mousemove() {
            var container = d3.select(this);
            updatePositions.call(this);
            container.call(fan);
        }

        function mouseleave() {
            var container = d3.select(this);
            var data = container.datum();
            if (data[0] != null && data[0].state === 'SELECT_SOURCE') {
                data.pop();
            }
            container.on('click.fan', null)
                .on('mousemove.fan', null)
                .on('mouseleave.fan', null);
        }

        function mouseclick() {
            var container = d3.select(this);
            var datum = container.datum()[0];
            switch (datum.state) {
            case 'SELECT_SOURCE':
                updatePositions.call(this);
                event.fansource.apply(this, arguments);
                datum.state = 'SELECT_TARGET';
                break;
            case 'SELECT_TARGET':
                updatePositions.call(this);
                event.fantarget.apply(this, arguments);
                datum.state = 'DONE';
                break;
            case 'DONE':
                event.fanclear.apply(this, arguments);
                datum.state = 'SELECT_SOURCE';
                updatePositions.call(this);
                break;
            default:
                throw new Error('Unknown state ' + datum.state);
            }
            container.call(fan);
        }

        fan.xScale = function(_x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = _x;
            return fan;
        };
        fan.yScale = function(_x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = _x;
            return fan;
        };
        fan.snap = function(_x) {
            if (!arguments.length) {
                return snap;
            }
            snap = _x;
            return fan;
        };
        fan.decorate = function(_x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = _x;
            return fan;
        };

        d3.rebind(fan, event, 'on');

        return fan;
    }

    // The multi series does some data-join gymnastics to ensure we don't -
    // * Create unnecessary intermediate DOM nodes
    // * Manipulate the data specified by the user
    // This is achieved by data joining the series array to the container but
    // overriding where the series value is stored on the node (__series__) and
    // forcing the node datum (__data__) to be the user supplied data (via mapping).

    function _multi() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            series = [],
            mapping = context,
            key = _index,
            decorate = noop;

        var dataJoin = dataJoinUtil()
            .selector('g.multi')
            .children(true)
            .attr('class', 'multi')
            .element('g')
            .key(function(d, i) {
                // This function is invoked twice, the first pass is to pull the key
                // value from the DOM nodes and the second pass is to pull the key
                // value from the data values.
                // As we store the series as an additional property on the node, we
                // look for that first and if we find it assume we're being called
                // during the first pass. Otherwise we assume it's the second pass
                // and pull the series from the data value.
                var dataSeries = this.__series__ || d;
                return key.call(this, dataSeries, i);
            });

        var multi = function(selection) {

            selection.each(function(data) {

                var g = dataJoin(this, series);

                g.each(function(dataSeries, i) {
                    // We must always assign the series to the node, as the order
                    // may have changed. N.B. in such a case the output is most
                    // likely garbage (containers should not be re-used) but by
                    // doing this we at least make it debuggable garbage :)
                    this.__series__ = dataSeries;

                    (dataSeries.xScale || dataSeries.x).call(dataSeries, xScale);
                    (dataSeries.yScale || dataSeries.y).call(dataSeries, yScale);

                    d3.select(this)
                        .datum(mapping.call(data, dataSeries, i))
                        .call(dataSeries);
                });

                // order is not available on a transition selection
                d3.selection.prototype.order.call(g);

                decorate(g);
            });
        };

        multi.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return multi;
        };
        multi.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return multi;
        };
        multi.series = function(x) {
            if (!arguments.length) {
                return series;
            }
            series = x;
            return multi;
        };
        multi.mapping = function(x) {
            if (!arguments.length) {
                return mapping;
            }
            mapping = x;
            return multi;
        };
        multi.key = function(x) {
            if (!arguments.length) {
                return key;
            }
            key = x;
            return multi;
        };
        multi.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return multi;
        };

        return multi;
    }

    function line() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            value = identity,
            keyValue = _index,
            label = value,
            decorate = noop,
            orient = 'horizontal';

        var dataJoin = dataJoinUtil()
            .selector('g.annotation')
            .element('g');

        var line = function(selection) {
            selection.each(function(data, selectionIndex) {

                // the value scale which the annotation 'value' relates to, the crossScale
                // is the other. Which is which depends on the orienation!
                var valueScale, crossScale, translation, lineProperty,
                    handleOne, handleTwo,
                    textAttributes = {x: -5, y: -5};
                switch (orient) {
                case 'horizontal':
                    translation = function(a, b) { return 'translate(' + a + ', ' + b + ')'; };
                    lineProperty = 'x2';
                    crossScale = xScale;
                    valueScale = yScale;
                    handleOne = 'left-handle';
                    handleTwo = 'right-handle';
                    break;

                case 'vertical':
                    translation = function(a, b) { return 'translate(' + b + ', ' + a + ')'; };
                    lineProperty = 'y2';
                    crossScale = yScale;
                    valueScale = xScale;
                    textAttributes.transform = 'rotate(-90)';
                    handleOne = 'bottom-handle';
                    handleTwo = 'top-handle';
                    break;

                default:
                    throw new Error('Invalid orientation');
                }

                var scaleRange = range(crossScale),
                    // the transform that sets the 'origin' of the annotation
                    containerTransform = function(d) {
                        var transform = valueScale(value(d));
                        return translation(scaleRange[0], transform);
                    },
                    scaleWidth = scaleRange[1] - scaleRange[0];

                var container = d3.select(this);

                // Create a group for each line
                dataJoin.attr('class', 'annotation ' + orient);
                var g = dataJoin(container, data);

                // create the outer container and line
                var enter = g.enter()
                    .attr('transform', containerTransform);
                enter.append('line')
                    .attr(lineProperty, scaleWidth);

                // create containers at each end of the annotation
                enter.append('g')
                    .classed(handleOne, true);

                enter.append('g')
                    .classed(handleTwo, true)
                    .attr('transform', translation(scaleWidth, 0))
                    .append('text')
                    .attr(textAttributes);

                // Update

                // translate the parent container to the left hand edge of the annotation
                g.attr('transform', containerTransform);

                // update the elements that depend on scale width
                g.select('line')
                    .attr(lineProperty, scaleWidth);
                g.select('g.' + handleTwo)
                    .attr('transform', translation(scaleWidth, 0));

                // Update the text label
                g.select('text')
                    .text(label);

                decorate(g, data, selectionIndex);
            });
        };

        line.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return line;
        };
        line.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return line;
        };
        line.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = d3.functor(x);
            return line;
        };
        line.keyValue = function(x) {
            if (!arguments.length) {
                return keyValue;
            }
            keyValue = d3.functor(x);
            return line;
        };
        line.label = function(x) {
            if (!arguments.length) {
                return label;
            }
            label = d3.functor(x);
            return line;
        };
        line.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return line;
        };
        line.orient = function(x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x;
            return line;
        };
        return line;
    }

    function xyBase() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            y0Value = d3.functor(0),
            x0Value = d3.functor(0),
            xValue = function(d, i) { return d.date; },
            yValue = function(d, i) { return d.close; };

        function base() { }

        base.x0 = function(d, i) {
            return xScale(x0Value(d, i));
        };
        base.y0 = function(d, i) {
            return yScale(y0Value(d, i));
        };
        base.x = base.x1 = function(d, i) {
            return xScale(xValue(d, i));
        };
        base.y = base.y1 = function(d, i) {
            return yScale(yValue(d, i));
        };
        base.defined = function(d, i) {
            return x0Value(d, i) != null && y0Value(d, i) != null &&
                xValue(d, i) != null && yValue(d, i) != null;
        };

        base.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return base;
        };
        base.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return base;
        };
        base.x0Value = function(x) {
            if (!arguments.length) {
                return x0Value;
            }
            x0Value = d3.functor(x);
            return base;
        };
        base.y0Value = function(x) {
            if (!arguments.length) {
                return y0Value;
            }
            y0Value = d3.functor(x);
            return base;
        };
        base.xValue = base.x1Value = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = d3.functor(x);
            return base;
        };
        base.yValue = base.y1Value = function(x) {
            if (!arguments.length) {
                return yValue;
            }
            yValue = d3.functor(x);
            return base;
        };

        return base;
    }

    function _point() {

        var decorate = noop,
            symbol = d3.svg.symbol();

        var base = xyBase();

        var dataJoin = dataJoinUtil()
            .selector('g.point')
            .element('g')
            .attr('class', 'point');

        var containerTransform = function(d, i) {
            return 'translate(' + base.x(d, i) + ', ' + base.y(d, i) + ')';
        };

        var point = function(selection) {

            selection.each(function(data, index) {

                var filteredData = data.filter(base.defined);

                var g = dataJoin(this, filteredData);
                g.enter()
                    .attr('transform', containerTransform)
                    .append('path');

                g.attr('transform', containerTransform)
                    .select('path')
                    .attr('d', symbol);

                decorate(g, data, index);
            });
        };

        point.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return point;
        };

        d3.rebind(point, base, 'xScale', 'xValue', 'yScale', 'yValue');
        d3.rebind(point, dataJoin, 'key');
        d3.rebind(point, symbol, 'size', 'type');

        return point;
    }

    function crosshair() {

        var event = d3.dispatch('trackingstart', 'trackingmove', 'trackingend'),
            xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            snap = function(_x, _y) {
                return noSnap(xScale, yScale)(_x, _y);
            },
            decorate = noop;

        var x = function(d) { return d.x; },
            y = function(d) { return d.y; };

        var dataJoin = dataJoinUtil()
            .children(true)
            .selector('g.crosshair')
            .element('g')
            .attr('class', 'crosshair');

        var pointSeries = _point()
            .xValue(x)
            .yValue(y);

        var horizontalLine = line()
            .value(y)
            .label(function(d) { return d.y; });

        var verticalLine = line()
            .orient('vertical')
            .value(x)
            .label(function(d) { return d.x; });

        // the line annotations used to render the crosshair are positioned using
        // screen coordinates. This function constructs a suitable scale for rendering
        // these annotations.
        function identityScale(scale) {
            return d3.scale.identity()
                .range(range(scale));
        }

        var crosshair = function(selection) {

            selection.each(function(data, index) {

                var container = d3.select(this)
                    .style('pointer-events', 'all')
                    .on('mouseenter.crosshair', mouseenter)
                    .on('mousemove.crosshair', mousemove)
                    .on('mouseleave.crosshair', mouseleave);

                var overlay = container.selectAll('rect')
                    .data([data]);

                overlay.enter()
                    .append('rect')
                    .style('visibility', 'hidden');

                container.select('rect')
                    .attr('x', range(xScale)[0])
                    .attr('y', range(yScale)[1])
                    .attr('width', range(xScale)[1])
                    .attr('height', range(yScale)[0]);

                var crosshairElement = dataJoin(container, data);

                crosshairElement.enter()
                    .style('pointer-events', 'none');

                var multi = _multi()
                    .series([horizontalLine, verticalLine, pointSeries])
                    .xScale(identityScale(xScale))
                    .yScale(identityScale(yScale))
                    .mapping(function() {
                        return [this];
                    });

                crosshairElement.call(multi);

                decorate(crosshairElement, data, index);
            });
        };

        function mouseenter() {
            var mouse = d3.mouse(this);
            var container = d3.select(this);
            var snapped = snap.apply(this, mouse);
            var data = container.datum();
            data.push(snapped);
            container.call(crosshair);
            event.trackingstart.apply(this, arguments);
        }

        function mousemove() {
            var mouse = d3.mouse(this);
            var container = d3.select(this);
            var snapped = snap.apply(this, mouse);
            var data = container.datum();
            data[data.length - 1] = snapped;
            container.call(crosshair);
            event.trackingmove.apply(this, arguments);
        }

        function mouseleave() {
            var container = d3.select(this);
            var data = container.datum();
            data.pop();
            container.call(crosshair);
            event.trackingend.apply(this, arguments);
        }

        crosshair.xScale = function(_x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = _x;
            return crosshair;
        };
        crosshair.yScale = function(_x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = _x;
            return crosshair;
        };
        crosshair.snap = function(_x) {
            if (!arguments.length) {
                return snap;
            }
            snap = _x;
            return crosshair;
        };
        crosshair.decorate = function(_x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = _x;
            return crosshair;
        };

        d3.rebind(crosshair, event, 'on');

        rebind(crosshair, horizontalLine, {
            yLabel: 'label'
        });

        rebind(crosshair, verticalLine, {
            xLabel: 'label'
        });

        return crosshair;
    }

    var tool = {
        crosshair: crosshair,
        fibonacciFan: fibonacciFan,
        container: _container,
        measure: measure
    };

    // Renders an error bar series as an SVG path based on the given array of datapoints.
    function errorBar() {

        var x = function(d, i) { return d.x; },
            y = function(d, i) { return d.y; },
            errorHigh = function(d, i) { return d.errorHigh; },
            errorLow = function(d, i) { return d.errorLow; },
            orient = 'vertical',
            barWidth = d3.functor(5);

        var errorBar = function(data) {

            return data.map(function(d, i) {
                var halfWidth = barWidth(d, i) / 2,
                    errorTotal = errorHigh(d, i) - errorLow(d, i),
                    yBottom = y(d, i) - errorLow(d, i),
                    yTop = errorHigh(d, i) - y(d, i),
                    xBottom = x(d, i) - errorLow(d, i),
                    xTop = errorHigh(d, i) - x(d, i);

                var errorVertical = '';
                var errorHorizontal = '';

                if (orient === 'vertical') {
                    var horizontalBar = 'h' + (-halfWidth) + 'h' + (2 * halfWidth) + 'h' + (-halfWidth),
                        verticalToHigh = 'v' + (-errorTotal);
                    errorVertical = 'M0,' + yBottom + horizontalBar + verticalToHigh + horizontalBar + 'M0,' + yTop;
                } else {
                    var verticalBar = 'v' + (-halfWidth) + 'v' + (2 * halfWidth) + 'v' + (-halfWidth),
                        horizontalToHigh = 'h' + (-errorTotal);
                    errorHorizontal = 'M' + xBottom + ',0' + verticalBar + horizontalToHigh + verticalBar + 'M' + xTop + ',0';
                }

                return errorVertical + errorHorizontal;
            })
            .join('');
        };

        errorBar.x = function(_x) {
            if (!arguments.length) {
                return x;
            }
            x = d3.functor(_x);
            return errorBar;
        };
        errorBar.y = function(_x) {
            if (!arguments.length) {
                return y;
            }
            y = d3.functor(_x);
            return errorBar;
        };
        errorBar.errorHigh = function(_x) {
            if (!arguments.length) {
                return errorHigh;
            }
            errorHigh = d3.functor(_x);
            return errorBar;
        };
        errorBar.errorLow = function(_x) {
            if (!arguments.length) {
                return errorLow;
            }
            errorLow = d3.functor(_x);
            return errorBar;
        };
        errorBar.barWidth = function(_x) {
            if (!arguments.length) {
                return barWidth;
            }
            barWidth = d3.functor(_x);
            return errorBar;
        };
        errorBar.orient = function(_x) {
            if (!arguments.length) {
                return orient;
            }
            orient = _x;
            return errorBar;
        };

        return errorBar;

    }

    // Renders an OHLC as an SVG path based on the given array of datapoints. Each
    // OHLC has a fixed width, whilst the x, open, high, low and close positions are
    // obtained from each point via the supplied accessor functions.
    function ohlc() {

        var x = function(d, i) { return d.date; },
            open = function(d, i) { return d.open; },
            high = function(d, i) { return d.high; },
            low = function(d, i) { return d.low; },
            close = function(d, i) { return d.close; },
            width = d3.functor(3);

        var ohlc = function(data) {

            return data.map(function(d, i) {
                var xValue = x(d, i),
                    yOpen = open(d, i),
                    yHigh = high(d, i),
                    yLow = low(d, i),
                    yClose = close(d, i),
                    halfWidth = width(d, i) / 2;

                var moveToLow = 'M' + xValue + ',' + yLow,
                    verticalToHigh = 'V' + yHigh,
                    openTick = 'M' + xValue + ',' + yOpen + 'h' + (-halfWidth),
                    closeTick = 'M' + xValue + ',' + yClose + 'h' + halfWidth;
                return moveToLow + verticalToHigh + openTick + closeTick;
            })
            .join('');
        };

        ohlc.x = function(_x) {
            if (!arguments.length) {
                return x;
            }
            x = d3.functor(_x);
            return ohlc;
        };
        ohlc.open = function(_x) {
            if (!arguments.length) {
                return open;
            }
            open = d3.functor(_x);
            return ohlc;
        };
        ohlc.high = function(_x) {
            if (!arguments.length) {
                return high;
            }
            high = d3.functor(_x);
            return ohlc;
        };
        ohlc.low = function(_x) {
            if (!arguments.length) {
                return low;
            }
            low = d3.functor(_x);
            return ohlc;
        };
        ohlc.close = function(_x) {
            if (!arguments.length) {
                return close;
            }
            close = d3.functor(_x);
            return ohlc;
        };
        ohlc.width = function(_x) {
            if (!arguments.length) {
                return width;
            }
            width = d3.functor(_x);
            return ohlc;
        };

        return ohlc;

    }

    // Renders a candlestick as an SVG path based on the given array of datapoints. Each
    // candlestick has a fixed width, whilst the x, open, high, low and close positions are
    // obtained from each point via the supplied accessor functions.
    function candlestick() {

        var x = function(d, i) { return d.date; },
            open = function(d, i) { return d.open; },
            high = function(d, i) { return d.high; },
            low = function(d, i) { return d.low; },
            close = function(d, i) { return d.close; },
            width = d3.functor(3);

        var candlestick = function(data) {

            return data.map(function(d, i) {
                var xValue = x(d, i),
                    yOpen = open(d, i),
                    yHigh = high(d, i),
                    yLow = low(d, i),
                    yClose = close(d, i),
                    barWidth = width(d, i);

                // Move to the opening price
                var body = 'M' + (xValue - barWidth / 2) + ',' + yOpen +
                    // Draw the width
                    'h' + barWidth +
                    // Draw to the closing price (vertically)
                    'V' + yClose +
                    // Draw the width
                    'h' + -barWidth +
                    // Move back to the opening price
                    'V' + yOpen +
                    // Close the path
                    'z';

                // Move to the max price of close or open; draw the high wick
                // N.B. Math.min() is used as we're dealing with pixel values,
                // the lower the pixel value, the higher the price!
                var highWick = 'M' + xValue + ',' + Math.min(yClose, yOpen) +
                    'V' + yHigh;

                // Move to the min price of close or open; draw the low wick
                // N.B. Math.max() is used as we're dealing with pixel values,
                // the higher the pixel value, the lower the price!
                var lowWick = 'M' + xValue + ',' + Math.max(yClose, yOpen) +
                    'V' + yLow;

                return body + highWick + lowWick;
            })
            .join('');
        };

        candlestick.x = function(_x) {
            if (!arguments.length) {
                return x;
            }
            x = d3.functor(_x);
            return candlestick;
        };
        candlestick.open = function(_x) {
            if (!arguments.length) {
                return open;
            }
            open = d3.functor(_x);
            return candlestick;
        };
        candlestick.high = function(_x) {
            if (!arguments.length) {
                return high;
            }
            high = d3.functor(_x);
            return candlestick;
        };
        candlestick.low = function(_x) {
            if (!arguments.length) {
                return low;
            }
            low = d3.functor(_x);
            return candlestick;
        };
        candlestick.close = function(_x) {
            if (!arguments.length) {
                return close;
            }
            close = d3.functor(_x);
            return candlestick;
        };
        candlestick.width = function(_x) {
            if (!arguments.length) {
                return width;
            }
            width = d3.functor(_x);
            return candlestick;
        };

        return candlestick;

    }

    // Renders a bar series as an SVG path based on the given array of datapoints. Each
    // bar has a fixed width, whilst the x, y and height are obtained from each data
    // point via the supplied accessor functions.
    function bar() {

        var x = function(d, i) { return d.x; },
            y = function(d, i) { return d.y; },
            horizontalAlign = 'center',
            verticalAlign = 'center',
            height = function(d, i) { return d.height; },
            width = d3.functor(3);

        var bar = function(data, index) {

            return data.map(function(d, i) {
                var xValue = x.call(this, d, index || i),
                    yValue = y.call(this, d, index || i),
                    barHeight = height.call(this, d, index || i),
                    barWidth = width.call(this, d, index || i);

                var horizontalOffset;
                switch (horizontalAlign) {
                case 'left':
                    horizontalOffset = barWidth;
                    break;
                case 'right':
                    horizontalOffset = 0;
                    break;
                case 'center':
                    horizontalOffset = barWidth / 2;
                    break;
                default:
                    throw new Error('Invalid horizontal alignment ' + horizontalAlign);
                }

                var verticalOffset;
                switch (verticalAlign) {
                case 'bottom':
                    verticalOffset = -barHeight;
                    break;
                case 'top':
                    verticalOffset = 0;
                    break;
                case 'center':
                    verticalOffset = barHeight / 2;
                    break;
                default:
                    throw new Error('Invalid vertical alignment ' + verticalAlign);
                }

                // Move to the start location
                var body = 'M' + (xValue - horizontalOffset) + ',' + (yValue - verticalOffset) +
                    // Draw the width
                    'h' + barWidth +
                    // Draw to the top
                    'v' + barHeight +
                    // Draw the width
                    'h' + -barWidth +
                    // Close the path
                    'z';
                return body;
            }, this)
            .join('');
        };

        bar.x = function(_x) {
            if (!arguments.length) {
                return x;
            }
            x = d3.functor(_x);
            return bar;
        };
        bar.y = function(_x) {
            if (!arguments.length) {
                return y;
            }
            y = d3.functor(_x);
            return bar;
        };
        bar.width = function(_x) {
            if (!arguments.length) {
                return width;
            }
            width = d3.functor(_x);
            return bar;
        };
        bar.horizontalAlign = function(_x) {
            if (!arguments.length) {
                return horizontalAlign;
            }
            horizontalAlign = _x;
            return bar;
        };
        bar.height = function(_x) {
            if (!arguments.length) {
                return height;
            }
            height = d3.functor(_x);
            return bar;
        };
        bar.verticalAlign = function(_x) {
            if (!arguments.length) {
                return verticalAlign;
            }
            verticalAlign = _x;
            return bar;
        };
        return bar;

    }

    // A drop-in replacement for the D3 axis, supporting the decorate pattern.
    function axis() {

        var scale = d3.scale.identity(),
            decorate = noop,
            orient = 'bottom',
            tickArguments = [10],
            tickValues = null,
            tickFormat = null,
            outerTickSize = 6,
            innerTickSize = 6,
            tickPadding = 3,
            svgDomainLine = d3.svg.line();

        var dataJoin = dataJoinUtil()
            .selector('g.tick')
            .element('g')
            .key(identity)
            .attr('class', 'tick');

        var domainPathDataJoin = dataJoinUtil()
            .selector('path.domain')
            .element('path')
            .attr('class', 'domain');

        // returns a function that creates a translation based on
        // the bound data
        function containerTranslate(s, trans) {
            return function(d) {
                return trans(s(d), 0);
            };
        }

        function translate(x, y) {
            if (isVertical()) {
                return 'translate(' + y + ', ' + x + ')';
            } else {
                return 'translate(' + x + ', ' + y + ')';
            }
        }

        function pathTranspose(arr) {
            if (isVertical()) {
                return arr.map(function(d) {
                    return [d[1], d[0]];
                });
            } else {
                return arr;
            }
        }

        function isVertical() {
            return orient === 'left' || orient === 'right';
        }

        function tryApply(fn, defaultVal) {
            return scale[fn] ? scale[fn].apply(scale, tickArguments) : defaultVal;
        }

        var axis = function(selection) {

            selection.each(function(data, index) {

                // Stash a snapshot of the new scale, and retrieve the old snapshot.
                var scaleOld = this.__chart__ || scale;
                this.__chart__ = scale.copy();

                var ticksArray = tickValues == null ? tryApply('ticks', scale.domain()) : tickValues;
                var tickFormatter = tickFormat == null ? tryApply('tickFormat', identity) : tickFormat;
                var sign = orient === 'bottom' || orient === 'right' ? 1 : -1;
                var container = d3.select(this);

                // add the domain line
                var range$$ = range(scale);
                var domainPathData = pathTranspose([
                    [range$$[0], sign * outerTickSize],
                    [range$$[0], 0],
                    [range$$[1], 0],
                    [range$$[1], sign * outerTickSize]
                ]);

                var domainLine = domainPathDataJoin(container, [data]);
                domainLine
                    .attr('d', svgDomainLine(domainPathData));

                // datajoin and construct the ticks / label
                dataJoin.attr({
                    // set the initial tick position based on the previous scale
                    // in order to get the correct enter transition - however, for ordinal
                    // scales the tick will not exist on the old scale, so use the current position
                    'transform': containerTranslate(isOrdinal(scale) ? scale : scaleOld, translate)
                });

                var g = dataJoin(container, ticksArray);

                // enter
                g.enter().append('path');

                var labelOffset = sign * (innerTickSize + tickPadding);
                g.enter()
                    .append('text')
                    .attr('transform', translate(0, labelOffset));

                // update
                g.attr('class', 'tick orient-' + orient);

                g.attr('transform', containerTranslate(scale, translate));

                g.selectAll('path')
                    .attr('d', function(d) {
                        return svgDomainLine(pathTranspose([
                            [0, 0], [0, sign * innerTickSize]
                        ]));
                    });

                g.selectAll('text')
                   .attr('transform', translate(0, labelOffset))
                   .text(tickFormatter);

                // exit - for non ordinal scales, exit by animating the tick to its new location
                if (!isOrdinal(scale)) {
                    g.exit()
                        .attr('transform', containerTranslate(scale, translate));
                }

                decorate(g, data, index);
            });
        };

        axis.scale = function(x) {
            if (!arguments.length) {
                return scale;
            }
            scale = x;
            return axis;
        };

        axis.ticks = function(x) {
            if (!arguments.length) {
                return tickArguments;
            }
            tickArguments = arguments;
            return axis;
        };

        axis.tickValues = function(x) {
            if (!arguments.length) {
                return tickValues;
            }
            tickValues = x;
            return axis;
        };

        axis.tickFormat = function(x) {
            if (!arguments.length) {
                return tickFormat;
            }
            tickFormat = x;
            return axis;
        };

        axis.tickSize = function(x) {
            var n = arguments.length;
            if (!n) {
                return innerTickSize;
            }
            innerTickSize = Number(x);
            outerTickSize = Number(arguments[n - 1]);
            return axis;
        };

        axis.innerTickSize = function(x) {
            if (!arguments.length) {
                return innerTickSize;
            }
            innerTickSize = Number(x);
            return axis;
        };

        axis.outerTickSize = function(x) {
            if (!arguments.length) {
                return outerTickSize;
            }
            outerTickSize = Number(x);
            return axis;
        };

        axis.tickPadding = function(x) {
            if (!arguments.length) {
                return tickPadding;
            }
            tickPadding = x;
            return axis;
        };

        axis.orient = function(x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x;
            return axis;
        };

        axis.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return axis;
        };

        return axis;
    }

    var svg = {
        axis: axis,
        bar: bar,
        candlestick: candlestick,
        ohlc: ohlc,
        errorBar: errorBar
    };

    function waterfall() {

        var xValueKey = '',
            yValue = function(d) { return d.y; },
            startsWithTotal = false,
            totals = function(d, i, data) {
                if (i === data.length - 1) {
                    return 'Final';
                }
            },
            directions = {
                up: 'up',
                down: 'down',
                unchanged: 'unchanged'
            };

        var waterfall = function(data) {
            var length = data.length,
                i = 0,
                previousEnd = 0,
                start,
                end,
                total,
                result = [],
                finalIndex = length - 1;

            if (startsWithTotal) {
                // First value is a total
                previousEnd = yValue(data[0]);
                result.push({
                    x: data[0][xValueKey],
                    y0: 0,
                    y1: previousEnd,
                    direction: directions.unchanged
                });
                i = 1;
            }

            for (i; i < length; i += 1) {
                start = previousEnd;
                end = yValue(data[i]) + previousEnd;

                result.push({
                    x: data[i][xValueKey],
                    y0: start,
                    y1: end,
                    direction: end - start > 0 ? directions.up : directions.down
                });

                total = totals(data[i], i, data);
                if (total) {
                    // Insert a total value here
                    result.push({
                        x: total,
                        y0: 0,
                        y1: end,
                        direction: directions.unchanged
                    });
                }

                previousEnd = end;
            }

            return result;
        };

        waterfall.xValueKey = function(x) {
            if (!arguments.length) {
                return xValueKey;
            }
            xValueKey = x;
            return waterfall;
        };

        waterfall.yValue = function(x) {
            if (!arguments.length) {
                return yValue;
            }
            yValue = x;
            return waterfall;
        };

        waterfall.total = function(x) {
            if (!arguments.length) {
                return totals;
            }
            totals = x;
            return waterfall;
        };

        waterfall.startsWithTotal = function(x) {
            if (!arguments.length) {
                return startsWithTotal;
            }
            startsWithTotal = x;
            return waterfall;
        };

        return waterfall;
    }

    var algorithm = {
        waterfall: waterfall
    };

    // The bar series renders a vertical (column) or horizontal (bar) series. In order
    // to provide a common implementation there are a number of functions that specialise
    // the rendering logic based on the 'orient' property.
    function barUtil() {

        var decorate = noop,
            barWidth = fractionalBarWidth(0.75),
            orient = 'vertical',
            pathGenerator = bar();

        var base = xyBase()
          .xValue(function(d, i) { return orient === 'vertical' ? d.date : d.close; })
          .yValue(function(d, i) { return orient === 'vertical' ? d.close : d.date; });

        var dataJoin = dataJoinUtil()
            .selector('g.bar')
            .element('g');

        function containerTranslation(d, i) {
            if (orient === 'vertical') {
                return 'translate(' + base.x1(d, i) + ', ' + base.y0(d, i) + ')';
            } else {
                return 'translate(' + base.x0(d, i) + ', ' + base.y1(d, i) + ')';
            }
        }

        function barHeight(d, i) {
            if (orient === 'vertical') {
                return base.y1(d, i) - base.y0(d, i);
            } else {
                return base.x1(d, i) - base.x0(d, i);
            }
        }

        function valueAxisDimension(generator) {
            if (orient === 'vertical') {
                return generator.height;
            } else {
                return generator.width;
            }
        }

        function crossAxisDimension(generator) {
            if (orient === 'vertical') {
                return generator.width;
            } else {
                return generator.height;
            }
        }

        function crossAxisValueFunction() {
            return orient === 'vertical' ? base.x : base.y;
        }

        var bar$$ = function(selection) {
            selection.each(function(data, index) {

                if (orient !== 'vertical' && orient !== 'horizontal') {
                    throw new Error('The bar series does not support an orientation of ' + orient);
                }

                dataJoin.attr('class', 'bar ' + orient);

                var filteredData = data.filter(base.defined);

                pathGenerator.x(0)
                    .y(0)
                    .width(0)
                    .height(0);

                if (orient === 'vertical') {
                    pathGenerator.verticalAlign('top');
                } else {
                    pathGenerator.horizontalAlign('right');
                }

                // set the width of the bars
                var width = barWidth(filteredData.map(crossAxisValueFunction()));
                crossAxisDimension(pathGenerator)(width);

                var g = dataJoin(this, filteredData);

                // within the enter selection the pathGenerator creates a zero
                // height bar. As a result, when used with a transition the bar grows
                // from y0 to y1 (y)
                g.enter()
                    .attr('transform', containerTranslation)
                    .append('path')
                    .attr('d', function(d) { return pathGenerator([d]); });

                // set the bar to its correct height
                valueAxisDimension(pathGenerator)(barHeight);

                g.attr('transform', containerTranslation)
                    .select('path')
                    .attr('d', function(d) { return pathGenerator([d]); });

                decorate(g, filteredData, index);
            });
        };

        bar$$.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return bar$$;
        };
        bar$$.barWidth = function(x) {
            if (!arguments.length) {
                return barWidth;
            }
            barWidth = d3.functor(x);
            return bar$$;
        };
        bar$$.orient = function(x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x;
            return bar$$;
        };

        d3.rebind(bar$$, base, 'xScale', 'xValue', 'x1Value', 'x0Value', 'yScale', 'yValue', 'y1Value', 'y0Value');
        d3.rebind(bar$$, dataJoin, 'key');

        return bar$$;
    }

    function _waterfall() {

        function isVertical() {
            return bar.orient() === 'vertical';
        }

        var bar = barUtil();

        var waterfall = function(selection) {
            bar
                .xValue(function(d, i) { return isVertical() ? d.x : d.y1; })
                .yValue(function(d, i) { return isVertical() ? d.y1 : d.x; })
                .x0Value(function(d, i) { return isVertical() ? 0 : d.y0; })
                .y0Value(function(d, i) { return isVertical() ? d.y0 : 0; })
                .decorate(function(g, d1, i) {
                    g.enter()
                        .attr('class', 'waterfall ' + bar.orient())
                        .classed('up', function(d) { return d.direction === 'up'; })
                        .classed('down', function(d) { return d.direction === 'down'; });
                });

            bar(selection);
        };

        rebindAll(waterfall, bar);

        return waterfall;
    }

    function errorBase() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            errorHigh = d3.functor(0),
            errorLow = d3.functor(0),
            xValue = function(d, i) { return d.date; },
            yValue = function(d, i) { return d.close; },
            orient = 'vertical',
            barWidth = d3.functor(5);

        function base() { }

        base.width = function(data, orientation) {
            if (orientation === 'vertical') {
                return barWidth(data.map(function(d, i) {
                    return xScale(xValue(d, i));
                }));
            } else {
                return barWidth(data.map(function(d, i) {
                    return yScale(yValue(d, i));
                }));
            }
        };

        base.values = function(d, i) {
            if (orient === 'vertical') {
                return {
                    x: xScale(xValue(d, i)),
                    y: yScale(yValue(d, i)),
                    errorHigh: yScale(errorHigh(d, i)),
                    errorLow: yScale(errorLow(d, i))
                };
            } else {
                return {
                    x: xScale(xValue(d, i)),
                    y: yScale(yValue(d, i)),
                    errorHigh: xScale(errorHigh(d, i)),
                    errorLow: xScale(errorLow(d, i))
                };
            }
        };
        base.defined = function(d, i) {
            return errorLow(d, i) != null && errorHigh(d, i) != null
                && xValue(d, i) != null && yValue(d, i) != null;
        };

        base.orient = function(x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x;
            return base;
        };
        base.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return base;
        };
        base.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return base;
        };
        base.errorLow = function(x) {
            if (!arguments.length) {
                return errorLow;
            }
            errorLow = d3.functor(x);
            return base;
        };
        base.errorHigh = function(x) {
            if (!arguments.length) {
                return errorHigh;
            }
            errorHigh = d3.functor(x);
            return base;
        };
        base.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = d3.functor(x);
            return base;
        };
        base.yValue = function(x) {
            if (!arguments.length) {
                return yValue;
            }
            yValue = d3.functor(x);
            return base;
        };
        base.barWidth = function(x) {
            if (!arguments.length) {
                return barWidth;
            }
            barWidth = d3.functor(x);
            return base;
        };

        return base;
    }

    function _errorBar() {

        var decorate = noop,
            barWidth = 5,
            orient = 'vertical',
            base = errorBase();

        var dataJoin = dataJoinUtil()
            .selector('g.errorBar')
            .element('g')
            .attr('class', 'errorBar');

        var errorBar$$ = function(selection) {
            base.orient(errorBar$$.orient());
            selection.each(function(data, index) {

                var filteredData = data.filter(base.defined);

                var g = dataJoin(this, filteredData);

                g.enter()
                    .append('path');

                var pathGenerator = errorBar()
                    .orient(errorBar$$.orient())
                    .barWidth(base.width(filteredData));

                g.each(function(d, i) {
                    var values = base.values(d, i);

                    var gErrorBar = d3.select(this)
                        .attr('transform', 'translate(' + values.x + ', ' + values.y + ')');

                    pathGenerator
                        .x(values.x)
                        .errorHigh(values.errorHigh)
                        .errorLow(values.errorLow)
                        .y(values.y);

                    gErrorBar.select('path')
                        .attr('d', pathGenerator([d]))
                        .attr('stroke', 'black');
                });

                decorate(g, data, index);
            });
        };

        errorBar$$.barWidth = function(x) {
            if (!arguments.length) {
                return barWidth;
            }
            barWidth = x;
            return errorBar$$;
        };

        errorBar$$.orient = function(x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x;
            return errorBar$$;
        };

        errorBar$$.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return errorBar$$;
        };

        d3.rebind(errorBar$$, dataJoin, 'key');
        rebindAll(errorBar$$, base);

        return errorBar$$;
    }

    function ohlcBase() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            xValue = function(d, i) { return d.date; },
            yOpenValue = function(d, i) { return d.open; },
            yHighValue = function(d, i) { return d.high; },
            yLowValue = function(d, i) { return d.low; },
            yCloseValue = function(d, i) { return d.close; },
            barWidth = fractionalBarWidth(0.75),
            xValueScaled = function(d, i) {
                return xScale(xValue(d, i));
            };

        function base() { }

        base.width = function(data) {
            return barWidth(data.map(xValueScaled));
        };

        base.defined = function(d, i) {
            return xValue(d, i) != null && yOpenValue(d, i) != null &&
                yLowValue(d, i) != null && yHighValue(d, i) != null &&
                yCloseValue(d, i) != null;
        };

        base.values = function(d, i) {
            var yCloseRaw = yCloseValue(d, i),
                yOpenRaw = yOpenValue(d, i);

            var direction = '';
            if (yCloseRaw > yOpenRaw) {
                direction = 'up';
            } else if (yCloseRaw < yOpenRaw) {
                direction = 'down';
            }

            return {
                x: xValueScaled(d, i),
                yOpen: yScale(yOpenRaw),
                yHigh: yScale(yHighValue(d, i)),
                yLow: yScale(yLowValue(d, i)),
                yClose: yScale(yCloseRaw),
                direction: direction
            };
        };

        base.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return base;
        };
        base.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return base;
        };
        base.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = x;
            return base;
        };
        base.yOpenValue = function(x) {
            if (!arguments.length) {
                return yOpenValue;
            }
            yOpenValue = x;
            return base;
        };
        base.yHighValue = function(x) {
            if (!arguments.length) {
                return yHighValue;
            }
            yHighValue = x;
            return base;
        };
        base.yLowValue = function(x) {
            if (!arguments.length) {
                return yLowValue;
            }
            yLowValue = x;
            return base;
        };
        base.yValue = base.yCloseValue = function(x) {
            if (!arguments.length) {
                return yCloseValue;
            }
            yCloseValue = x;
            return base;
        };
        base.barWidth = function(x) {
            if (!arguments.length) {
                return barWidth;
            }
            barWidth = d3.functor(x);
            return base;
        };

        return base;
    }

    function groupedBar() {

        var bar = barUtil(),
            barWidth = fractionalBarWidth(0.75),
            decorate = noop,
            xScale = d3.scale.linear(),
            offsetScale = d3.scale.linear(),
            values = function(d) { return d.values; };

        var dataJoin = dataJoinUtil()
            .selector('g.stacked')
            .element('g')
            .attr('class', 'stacked');

        var x = function(d, i) { return xScale(bar.xValue()(d, i)); };

        var groupedBar = function(selection) {
            selection.each(function(data) {

                var width = barWidth(values(data[0]).map(x));
                var subBarWidth = width / (data.length - 1);
                bar.barWidth(subBarWidth);

                var halfWidth = width / 2;
                offsetScale.domain([0, data.length - 1])
                    .range([-halfWidth, halfWidth]);

                var g = dataJoin(this, data);

                g.enter().append('g');

                g.select('g')
                    .datum(values)
                    .each(function(series, index) {
                        var container = d3.select(this);

                        // create a composite scale that applies the required offset
                        var compositeScale = function(_x) {
                            return xScale(_x) + offsetScale(index);
                        };
                        bar.xScale(compositeScale);

                        // adapt the decorate function to give each series the correct index
                        bar.decorate(function(s, d) {
                            decorate(s, d, index);
                        });

                        container.call(bar);
                    });
            });
        };

        groupedBar.decorate = function(_x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = _x;
            return groupedBar;
        };
        groupedBar.xScale = function(_x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = _x;
            return groupedBar;
        };
        groupedBar.values = function(_x) {
            if (!arguments.length) {
                return values;
            }
            values = _x;
            return groupedBar;
        };

        d3.rebind(groupedBar, bar, 'yValue', 'xValue', 'yScale');

        return groupedBar;
    }

    function _stack() {

        var series = noop,
            values = function(d) { return d.values; };

        var stack = function(selection) {

            selection.each(function(data) {

                var container = d3.select(this);

                var dataJoin = dataJoinUtil()
                    .selector('g.stacked')
                    .element('g')
                    .attr('class', 'stacked');

                var g = dataJoin(container, data);

                g.enter().append('g');
                g.select('g')
                    .datum(values)
                    .call(series);
            });
        };

        stack.series = function(x) {
            if (!arguments.length) {
                return series;
            }
            series = x;
            return stack;
        };
        stack.values = function(x) {
            if (!arguments.length) {
                return values;
            }
            values = x;
            return stack;
        };

        return stack;
    }

    function _line() {

        var decorate = noop;

        var base = xyBase();

        var lineData = d3.svg.line()
            .defined(base.defined)
            .x(base.x)
            .y(base.y);

        var dataJoin = dataJoinUtil()
            .selector('path.line')
            .element('path')
            .attr('class', 'line');

        var line = function(selection) {

            selection.each(function(data, index) {

                var path = dataJoin(this, [data]);
                path.attr('d', lineData);

                decorate(path, data, index);
            });
        };

        line.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return line;
        };

        d3.rebind(line, base, 'xScale', 'xValue', 'yScale', 'yValue');
        d3.rebind(line, dataJoin, 'key');
        d3.rebind(line, lineData, 'interpolate', 'tension');

        return line;
    }

    function __line() {

        var line = _line()
            .yValue(function(d) { return d.y0 + d.y; });

        var stack = _stack()
            .series(line);

        var stackedLine = function(selection) {
            selection.call(stack);
        };

        rebindAll(stackedLine, line);

        return stackedLine;
    }

    function _bar() {

        var bar = barUtil()
            .yValue(function(d) { return d.y0 + d.y; })
            .y0Value(function(d) { return d.y0; });

        var stack = _stack()
            .series(bar);

        var stackedBar = function(selection) {
            selection.call(stack);
        };

        rebindAll(stackedBar, bar);

        return stackedBar;
    }

    function _area() {

        var decorate = noop;

        var base = xyBase();

        var areaData = d3.svg.area()
            .defined(base.defined)
            .x(base.x)
            .y0(base.y0)
            .y1(base.y1);

        var dataJoin = dataJoinUtil()
            .selector('path.area')
            .element('path')
            .attr('class', 'area');

        var area = function(selection) {

            selection.each(function(data, index) {

                var path = dataJoin(this, [data]);
                path.attr('d', areaData);

                decorate(path, data, index);
            });
        };

        area.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return area;
        };

        d3.rebind(area, base, 'xScale', 'xValue', 'yScale', 'yValue', 'y1Value', 'y0Value');
        d3.rebind(area, dataJoin, 'key');
        d3.rebind(area, areaData, 'interpolate', 'tension');

        return area;
    }

    function area() {

        var area = _area()
            .yValue(function(d) { return d.y0 + d.y; })
            .y0Value(function(d) { return d.y0; });

        var stack = _stack()
            .series(area);

        var stackedArea = function(selection) {
            selection.call(stack);
        };

        rebindAll(stackedArea, area);

        return stackedArea;
    }

    var stacked = {
        area: area,
        bar: _bar,
        stack: _stack,
        line: __line
    };

    function _ohlc(drawMethod) {

        var decorate = noop,
            base = ohlcBase();

        var dataJoin = dataJoinUtil()
            .selector('g.ohlc')
            .element('g')
            .attr('class', 'ohlc');

        function containerTranslation(values) {
            return 'translate(' + values.x + ', ' + values.yHigh + ')';
        }

        var ohlc$$ = function(selection) {
            selection.each(function(data, index) {

                var filteredData = data.filter(base.defined);

                var g = dataJoin(this, filteredData);

                g.enter()
                    .attr('transform', function(d, i) {
                        return containerTranslation(base.values(d, i)) + ' scale(1e-6, 1)';
                    })
                    .append('path');

                var pathGenerator = ohlc()
                        .width(base.width(filteredData));

                g.each(function(d, i) {
                    var values = base.values(d, i);

                    var graph = d3.transition(d3.select(this))
                        .attr({
                            'class': 'ohlc ' + values.direction,
                            'transform': function() { return containerTranslation(values) + ' scale(1)'; }
                        });

                    pathGenerator.x(d3.functor(0))
                        .open(function() { return values.yOpen - values.yHigh; })
                        .high(function() { return values.yHigh - values.yHigh; })
                        .low(function() { return values.yLow - values.yHigh; })
                        .close(function() { return values.yClose - values.yHigh; });

                    graph.select('path')
                        .attr('d', pathGenerator([d]));
                });

                decorate(g, data, index);
            });
        };

        ohlc$$.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return ohlc$$;
        };

        d3.rebind(ohlc$$, dataJoin, 'key');
        rebindAll(ohlc$$, base);

        return ohlc$$;
    }

    function cycle() {

        var decorate = noop,
            xScale = d3.scale.linear(),
            yScale = d3.scale.linear(),
            xValue = function(d, i) { return d.date.getDay(); },
            subScale = d3.scale.linear(),
            subSeries = _line(),
            barWidth = fractionalBarWidth(0.75);

        var dataJoin = dataJoinUtil()
            .selector('g.cycle')
            .element('g')
            .attr('class', 'cycle');

        var cycle = function(selection) {

            selection.each(function(data, index) {

                var dataByX = d3.nest()
                    .key(xValue)
                    .map(data);

                var xValues = Object.keys(dataByX);

                var width = barWidth(xValues.map(xScale)),
                    halfWidth = width / 2;

                var g = dataJoin(this, xValues);

                g.each(function(d, i) {

                    var graph = d3.select(this);

                    graph.attr('transform', 'translate(' + xScale(d) + ', 0)');

                    (subScale.rangeBands || subScale.range)([-halfWidth, halfWidth]);

                    subSeries.xScale(subScale)
                        .yScale(yScale);

                    d3.select(this)
                        .datum(dataByX[d])
                        .call(subSeries);

                });

                decorate(g, xValues, index);
            });
        };

        cycle.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return cycle;
        };
        cycle.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return cycle;
        };
        cycle.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return cycle;
        };
        cycle.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = x;
            return cycle;
        };
        cycle.subScale = function(x) {
            if (!arguments.length) {
                return subScale;
            }
            subScale = x;
            return cycle;
        };
        cycle.subSeries = function(x) {
            if (!arguments.length) {
                return subSeries;
            }
            subSeries = x;
            return cycle;
        };
        cycle.barWidth = function(x) {
            if (!arguments.length) {
                return barWidth;
            }
            barWidth = d3.functor(x);
            return cycle;
        };

        d3.rebind(cycle, dataJoin, 'key');

        return cycle;

    }

    function _candlestick() {

        var decorate = noop,
            base = ohlcBase();

        var dataJoin = dataJoinUtil()
            .selector('g.candlestick')
            .element('g')
            .attr('class', 'candlestick');

        function containerTranslation(values) {
            return 'translate(' + values.x + ', ' + values.yHigh + ')';
        }

        var candlestick$$ = function(selection) {

            selection.each(function(data, index) {

                var filteredData = data.filter(base.defined);

                var g = dataJoin(this, filteredData);

                g.enter()
                    .attr('transform', function(d, i) {
                        return containerTranslation(base.values(d, i)) + ' scale(1e-6, 1)';
                    })
                    .append('path');

                var pathGenerator = candlestick()
                        .width(base.width(filteredData));

                g.each(function(d, i) {

                    var values = base.values(d, i);

                    var graph = d3.transition(d3.select(this))
                        .attr({
                            'class': 'candlestick ' + values.direction,
                            'transform': function() { return containerTranslation(values) + ' scale(1)'; }
                        });

                    pathGenerator.x(d3.functor(0))
                        .open(function() { return values.yOpen - values.yHigh; })
                        .high(function() { return values.yHigh - values.yHigh; })
                        .low(function() { return values.yLow - values.yHigh; })
                        .close(function() { return values.yClose - values.yHigh; });

                    graph.select('path')
                        .attr('d', pathGenerator([d]));
                });

                decorate(g, data, index);
            });
        };

        candlestick$$.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return candlestick$$;
        };

        d3.rebind(candlestick$$, dataJoin, 'key');
        rebindAll(candlestick$$, base);

        return candlestick$$;

    }

    // Adapts a fc.svg.axis for use as a series (i.e. accepts xScale/yScale). Only required when
    // you want an axis to appear in the middle of a chart e.g. as part of a cycle plot. Otherwise
    // prefer using the fc.svg.axis directly.
    function _axis() {

        var axis$$ = axis(),
            baseline = d3.functor(0),
            decorate = noop,
            xScale = d3.time.scale(),
            yScale = d3.scale.linear();

        var dataJoin = dataJoinUtil()
            .selector('g.axis-adapter')
            .element('g')
            .attr({'class': 'axis axis-adapter'});

        var axisAdapter = function(selection) {

            selection.each(function(data, index) {

                var g = dataJoin(this, [data]);

                var translation;
                switch (axisAdapter.orient()) {
                case 'top':
                case 'bottom':
                    translation = 'translate(0,' + yScale(baseline(data)) + ')';
                    axis$$.scale(xScale);
                    break;

                case 'left':
                case 'right':
                    translation = 'translate(' + xScale(baseline(data)) + ',0)';
                    axis$$.scale(yScale);
                    break;

                default:
                    throw new Error('Invalid orientation');
                }

                g.enter().attr('transform', translation);
                g.attr('transform', translation);

                g.call(axis$$);

                decorate(g, data, index);
            });
        };

        axisAdapter.baseline = function(x) {
            if (!arguments.length) {
                return baseline;
            }
            baseline = d3.functor(x);
            return axisAdapter;
        };
        axisAdapter.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return axisAdapter;
        };
        axisAdapter.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return axisAdapter;
        };
        axisAdapter.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return axisAdapter;
        };

        return d3.rebind(axisAdapter, axis$$, 'orient', 'ticks', 'tickValues', 'tickSize',
            'innerTickSize', 'outerTickSize', 'tickPadding', 'tickFormat');
    }

    var _series = {
        area: _area,
        axis: _axis,
        bar: barUtil,
        candlestick: _candlestick,
        cycle: cycle,
        line: _line,
        multi: _multi,
        ohlc: _ohlc,
        point: _point,
        stacked: stacked,
        groupedBar: groupedBar,
        xyBase: xyBase,
        ohlcBase: ohlcBase,
        errorBar: _errorBar,
        waterfall: _waterfall,
        algorithm: algorithm
    };

    function _identity() {

        var identity$$ = {};

        identity$$.distance = function(startDate, endDate) {
            return endDate.getTime() - startDate.getTime();
        };

        identity$$.offset = function(startDate, ms) {
            return new Date(startDate.getTime() + ms);
        };

        identity$$.clampUp = identity;

        identity$$.clampDown = identity;

        identity$$.copy = function() { return identity$$; };

        return identity$$;
    }

    // obtains the ticks from the given scale, transforming the result to ensure
    // it does not include any discontinuities
    function tickTransformer(ticks, discontinuityProvider, domain) {
        var clampedTicks = ticks.map(function(tick, index) {
            if (index < ticks.length - 1) {
                return discontinuityProvider.clampUp(tick);
            } else {
                var clampedTick = discontinuityProvider.clampUp(tick);
                return clampedTick < domain[1] ?
                    clampedTick : discontinuityProvider.clampDown(tick);
            }
        });
        var uniqueTicks = clampedTicks.reduce(function(arr, tick) {
            if (arr.filter(function(f) { return f.getTime() === tick.getTime(); }).length === 0) {
                arr.push(tick);
            }
            return arr;
        }, []);
        return uniqueTicks;
    }

    /**
    * The `fc.scale.dateTime` scale renders a discontinuous date time scale, i.e. a time scale that incorporates gaps.
    * As an example, you can use this scale to render a chart where the weekends are skipped.
    *
    * @type {object}
    * @memberof fc.scale
    * @class fc.scale.dateTime
    */
    function dateTimeScale(adaptedScale, discontinuityProvider) {

        if (!arguments.length) {
            adaptedScale = d3.time.scale();
            discontinuityProvider = _identity();
        }

        function scale(date) {
            var domain = adaptedScale.domain();
            var range = adaptedScale.range();

            // The discontinuityProvider is responsible for determine the distance between two points
            // along a scale that has discontinuities (i.e. sections that have been removed).
            // the scale for the given point 'x' is calculated as the ratio of the discontinuous distance
            // over the domain of this axis, versus the discontinuous distance to 'x'
            var totalDomainDistance = discontinuityProvider.distance(domain[0], domain[1]);
            var distanceToX = discontinuityProvider.distance(domain[0], date);
            var ratioToX = distanceToX / totalDomainDistance;
            var scaledByRange = ratioToX * (range[1] - range[0]) + range[0];
            return scaledByRange;
        }

        scale.invert = function(x) {
            var domain = adaptedScale.domain();
            var range = adaptedScale.range();

            var ratioToX = (x - range[0]) / (range[1] - range[0]);
            var totalDomainDistance = discontinuityProvider.distance(domain[0], domain[1]);
            var distanceToX = ratioToX * totalDomainDistance;
            return discontinuityProvider.offset(domain[0], distanceToX);
        };

        scale.domain = function(x) {
            if (!arguments.length) {
                return adaptedScale.domain();
            }
            // clamp the upper and lower domain values to ensure they
            // do not fall within a discontinuity
            var domainLower = discontinuityProvider.clampUp(x[0]);
            var domainUpper = discontinuityProvider.clampDown(x[1]);
            adaptedScale.domain([domainLower, domainUpper]);
            return scale;
        };

        scale.nice = function() {
            adaptedScale.nice();
            var domain = adaptedScale.domain();
            var domainLower = discontinuityProvider.clampUp(domain[0]);
            var domainUpper = discontinuityProvider.clampDown(domain[1]);
            adaptedScale.domain([domainLower, domainUpper]);
            return scale;
        };

        scale.ticks = function() {
            var ticks = adaptedScale.ticks.apply(this, arguments);
            return tickTransformer(ticks, discontinuityProvider, scale.domain());
        };

        scale.copy = function() {
            return dateTimeScale(adaptedScale.copy(), discontinuityProvider.copy());
        };

        scale.discontinuityProvider = function(x) {
            if (!arguments.length) {
                return discontinuityProvider;
            }
            discontinuityProvider = x;
            return scale;
        };

        return d3.rebind(scale, adaptedScale, 'range', 'rangeRound', 'interpolate', 'clamp',
            'tickFormat');
    }

    function exportedScale() {
        return dateTimeScale();
    }
    exportedScale.tickTransformer = tickTransformer;

    function _skipWeekends() {
        var millisPerDay = 24 * 3600 * 1000;
        var millisPerWorkWeek = millisPerDay * 5;
        var millisPerWeek = millisPerDay * 7;

        var skipWeekends = {};

        function isWeekend(date) {
            return date.getDay() === 0 || date.getDay() === 6;
        }

        skipWeekends.clampDown = function(date) {
            if (date && isWeekend(date)) {
                var daysToSubtract = date.getDay() === 0 ? 2 : 1;
                // round the date up to midnight
                var newDate = d3.time.day.ceil(date);
                // then subtract the required number of days
                return d3.time.day.offset(newDate, -daysToSubtract);
            } else {
                return date;
            }
        };

        skipWeekends.clampUp = function(date) {
            if (date && isWeekend(date)) {
                var daysToAdd = date.getDay() === 0 ? 1 : 2;
                // round the date down to midnight
                var newDate = d3.time.day.floor(date);
                // then add the required number of days
                return d3.time.day.offset(newDate, daysToAdd);
            } else {
                return date;
            }
        };

        // returns the number of included milliseconds (i.e. those which do not fall)
        // within discontinuities, along this scale
        skipWeekends.distance = function(startDate, endDate) {
            startDate = skipWeekends.clampUp(startDate);
            endDate = skipWeekends.clampDown(endDate);

            // move the start date to the end of week boundary
            var offsetStart = d3.time.saturday.ceil(startDate);
            if (endDate < offsetStart) {
                return endDate.getTime() - startDate.getTime();
            }

            var msAdded = offsetStart.getTime() - startDate.getTime();

            // move the end date to the end of week boundary
            var offsetEnd = d3.time.saturday.ceil(endDate);
            var msRemoved = offsetEnd.getTime() - endDate.getTime();

            // determine how many weeks there are between these two dates
            var weeks = (offsetEnd.getTime() - offsetStart.getTime()) / millisPerWeek;

            return weeks * millisPerWorkWeek + msAdded - msRemoved;
        };

        skipWeekends.offset = function(startDate, ms) {
            var date = isWeekend(startDate) ? skipWeekends.clampUp(startDate) : startDate;
            var remainingms = ms;

            // move to the end of week boundary
            var endOfWeek = d3.time.saturday.ceil(date);
            remainingms -= (endOfWeek.getTime() - date.getTime());

            // if the distance to the boundary is greater than the number of ms
            // simply add the ms to the current date
            if (remainingms < 0) {
                return new Date(date.getTime() + ms);
            }

            // skip the weekend
            date = d3.time.day.offset(endOfWeek, 2);

            // add all of the complete weeks to the date
            var completeWeeks = Math.floor(remainingms / millisPerWorkWeek);
            date = d3.time.day.offset(date, completeWeeks * 7);
            remainingms -= completeWeeks * millisPerWorkWeek;

            // add the remaining time
            date = new Date(date.getTime() + remainingms);
            return date;
        };

        skipWeekends.copy = function() { return skipWeekends; };

        return skipWeekends;
    }

    var __scale = {
        discontinuity: {
            identity: _identity,
            skipWeekends: _skipWeekends
        },
        dateTime: exportedScale
    };

    function elderRay() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            xValue = function(d) { return d.date; },
            root = function(d) { return d.elderRay; },
            bullBar = barUtil(),
            bearBar = barUtil(),
            bullBarTop = barUtil(),
            bearBarTop = barUtil(),
            multi = _multi(),
            decorate = noop;

        var elderRay = function(selection) {

            function isTop(input, comparison) {
                // The values share parity and the input is smaller than the comparison
                return (input * comparison > 0 && Math.abs(input) < Math.abs(comparison));
            }

            bullBar
                .xValue(xValue)
                .yValue(function(d, i) {
                    return isTop(root(d).bullPower, root(d).bearPower) ? undefined : root(d).bullPower;
                });

            bearBar
                .xValue(xValue)
                .yValue(function(d, i) {
                    return isTop(root(d).bearPower, root(d).bullPower) ? undefined : root(d).bearPower;
                });

            bullBarTop
                .xValue(xValue)
                .yValue(function(d, i) {
                    return isTop(root(d).bullPower, root(d).bearPower) ? root(d).bullPower : undefined;
                });

            bearBarTop
                .xValue(xValue)
                .yValue(function(d, i) {
                    return isTop(root(d).bearPower, root(d).bullPower) ? root(d).bearPower : undefined;
                });

            multi
                .xScale(xScale)
                .yScale(yScale)
                .series([bullBar, bearBar, bullBarTop, bearBarTop])
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi ' + ['bull', 'bear', 'bull top', 'bear top'][i];
                        });
                    decorate(g, data, index);
                });

            selection.call(multi);
        };

        elderRay.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return elderRay;
        };
        elderRay.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = x;
            return elderRay;
        };
        elderRay.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return elderRay;
        };
        elderRay.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return elderRay;
        };

        return elderRay;
    }

    function envelope() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            yValue = function(d, i) { return d.close; },
            xValue = function(d, i) { return d.date; },
            root = function(d) { return d.envelope; },
            decorate = noop;

        var area = _area()
            .y0Value(function(d, i) {
                return root(d).upper;
            })
            .y1Value(function(d, i) {
                return root(d).lower;
            });

        var upperLine = _line()
            .yValue(function(d, i) {
                return root(d).upper;
            });

        var lowerLine = _line()
            .yValue(function(d, i) {
                return root(d).lower;
            });

        var envelope = function(selection) {

            var multi = _multi()
                .xScale(xScale)
                .yScale(yScale)
                .series([area, upperLine, lowerLine])
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi envelope ' + ['area', 'upper', 'lower'][i];
                        });
                    decorate(g, data, index);
                });

            area.xValue(xValue);
            upperLine.xValue(xValue);
            lowerLine.xValue(xValue);

            selection.call(multi);
        };

        envelope.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return envelope;
        };
        envelope.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return envelope;
        };
        envelope.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = x;
            return envelope;
        };
        envelope.yValue = function(x) {
            if (!arguments.length) {
                return yValue;
            }
            yValue = x;
            return envelope;
        };
        envelope.root = function(x) {
            if (!arguments.length) {
                return root;
            }
            root = x;
            return envelope;
        };
        envelope.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return envelope;
        };

        return envelope;
    }

    function forceIndex() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            multiSeries = _multi(),
            decorate = noop;

        var annotations = line();

        var forceLine = _line()
            .yValue(function(d, i) {
                return d.force;
            });

        var force = function(selection) {

            multiSeries.xScale(xScale)
                .yScale(yScale)
                .series([annotations, forceLine])
                .mapping(function(series) {
                    if (series === annotations) {
                        return [
                            0
                        ];
                    }
                    return this;
                })
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi ' + ['annotations', 'indicator'][i];
                        });
                    decorate(g, data, index);
                });

            selection.call(multiSeries);
        };

        force.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            annotations.xScale(x);
            return force;
        };
        force.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            annotations.yScale(x);
            return force;
        };
        force.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return force;
        };

        d3.rebind(force, forceLine, 'yValue', 'xValue');

        return force;
    }

    function stochasticOscillator() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            upperValue = 80,
            lowerValue = 20,
            multi = _multi(),
            decorate = noop;

        var annotations = line();
        var dLine = _line()
            .yValue(function(d, i) {
                return d.stochastic.d;
            });

        var kLine = _line()
            .yValue(function(d, i) {
                return d.stochastic.k;
            });

        var stochastic = function(selection) {

            multi.xScale(xScale)
                .yScale(yScale)
                .series([annotations, dLine, kLine])
                .mapping(function(series) {
                    if (series === annotations) {
                        return [
                            upperValue,
                            lowerValue
                        ];
                    }
                    return this;
                })
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi stochastic ' + ['annotations', 'stochastic-d', 'stochastic-k'][i];
                        });
                    decorate(g, data, index);
                });

            selection.call(multi);
        };

        stochastic.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return stochastic;
        };
        stochastic.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return stochastic;
        };
        stochastic.upperValue = function(x) {
            if (!arguments.length) {
                return upperValue;
            }
            upperValue = x;
            return stochastic;
        };
        stochastic.lowerValue = function(x) {
            if (!arguments.length) {
                return lowerValue;
            }
            lowerValue = x;
            return stochastic;
        };
        stochastic.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return stochastic;
        };

        d3.rebind(stochastic, dLine, 'yDValue', 'xDValue');

        d3.rebind(stochastic, kLine, 'yKValue', 'xKValue');

        return stochastic;
    }

    function relativeStrengthIndex() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            upperValue = 70,
            lowerValue = 30,
            multiSeries = _multi(),
            decorate = noop;

        var annotations = line();
        var rsiLine = _line()
            .yValue(function(d, i) { return d.rsi; });

        var rsi = function(selection) {

            multiSeries.xScale(xScale)
                .yScale(yScale)
                .series([rsiLine, annotations])
                .mapping(function(series) {
                    if (series === annotations) {
                        return [
                            upperValue,
                            50,
                            lowerValue
                        ];
                    }
                    return this;
                })
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi rsi ' + ['indicator', 'annotations'][i];
                        });
                    decorate(g, data, index);
                });

            selection.call(multiSeries);
        };

        rsi.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return rsi;
        };
        rsi.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return rsi;
        };
        rsi.upperValue = function(x) {
            if (!arguments.length) {
                return upperValue;
            }
            upperValue = x;
            return rsi;
        };
        rsi.lowerValue = function(x) {
            if (!arguments.length) {
                return lowerValue;
            }
            lowerValue = x;
            return rsi;
        };
        rsi.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return rsi;
        };

        d3.rebind(rsi, rsiLine, 'yValue', 'xValue');

        return rsi;
    }

    function macd() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            xValue = function(d) { return d.date; },
            root = function(d) { return d.macd; },
            macdLine = _line(),
            signalLine = _line(),
            divergenceBar = barUtil(),
            multiSeries = _multi(),
            decorate = noop;

        var macd = function(selection) {

            macdLine.xValue(xValue)
                .yValue(function(d, i) { return root(d).macd; });

            signalLine.xValue(xValue)
                .yValue(function(d, i) { return root(d).signal; });

            divergenceBar.xValue(xValue)
                .yValue(function(d, i) { return root(d).divergence; });

            multiSeries.xScale(xScale)
                .yScale(yScale)
                .series([divergenceBar, macdLine, signalLine])
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi ' + ['macd-divergence', 'macd', 'macd-signal'][i];
                        });
                    decorate(g, data, index);
                });

            selection.call(multiSeries);
        };

        macd.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return macd;
        };
        macd.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = x;
            return macd;
        };
        macd.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return macd;
        };
        macd.root = function(x) {
            if (!arguments.length) {
                return root;
            }
            root = x;
            return macd;
        };
        macd.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return macd;
        };

        return macd;
    }

    function bollingerBands() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            yValue = function(d, i) { return d.close; },
            xValue = function(d, i) { return d.date; },
            root = function(d) { return d.bollingerBands; },
            decorate = noop;

        var area = _area()
            .y0Value(function(d, i) {
                return root(d).upper;
            })
            .y1Value(function(d, i) {
                return root(d).lower;
            });

        var upperLine = _line()
            .yValue(function(d, i) {
                return root(d).upper;
            });

        var averageLine = _line()
            .yValue(function(d, i) {
                return root(d).average;
            });

        var lowerLine = _line()
            .yValue(function(d, i) {
                return root(d).lower;
            });

        var bollingerBands = function(selection) {

            var multi = _multi()
                .xScale(xScale)
                .yScale(yScale)
                .series([area, upperLine, lowerLine, averageLine])
                .decorate(function(g, data, index) {
                    g.enter()
                        .attr('class', function(d, i) {
                            return 'multi bollinger ' + ['area', 'upper', 'lower', 'average'][i];
                        });
                    decorate(g, data, index);
                });

            area.xValue(xValue);
            upperLine.xValue(xValue);
            averageLine.xValue(xValue);
            lowerLine.xValue(xValue);

            selection.call(multi);
        };

        bollingerBands.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return bollingerBands;
        };
        bollingerBands.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return bollingerBands;
        };
        bollingerBands.xValue = function(x) {
            if (!arguments.length) {
                return xValue;
            }
            xValue = x;
            return bollingerBands;
        };
        bollingerBands.yValue = function(x) {
            if (!arguments.length) {
                return yValue;
            }
            yValue = x;
            return bollingerBands;
        };
        bollingerBands.root = function(x) {
            if (!arguments.length) {
                return root;
            }
            root = x;
            return bollingerBands;
        };
        bollingerBands.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return bollingerBands;
        };

        return bollingerBands;
    }

    var renderer = {
        bollingerBands: bollingerBands,
        macd: macd,
        relativeStrengthIndex: relativeStrengthIndex,
        stochasticOscillator: stochasticOscillator,
        forceIndex: forceIndex,
        envelope: envelope,
        elderRay: elderRay
    };

    function calculator() {

        var undefinedValue = d3.functor(undefined),
            windowSize = d3.functor(10),
            accumulator = noop,
            value = identity;

        var slidingWindow = function(data) {
            var size = windowSize.apply(this, arguments);
            var windowData = data.slice(0, size).map(value);
            return data.map(function(d, i) {
                if (i < size - 1) {
                    return undefinedValue(d, i);
                }
                if (i >= size) {
                    // Treat windowData as FIFO rolling buffer
                    windowData.shift();
                    windowData.push(value(d, i));
                }
                return accumulator(windowData);
            });
        };

        slidingWindow.undefinedValue = function(x) {
            if (!arguments.length) {
                return undefinedValue;
            }
            undefinedValue = d3.functor(x);
            return slidingWindow;
        };
        slidingWindow.windowSize = function(x) {
            if (!arguments.length) {
                return windowSize;
            }
            windowSize = d3.functor(x);
            return slidingWindow;
        };
        slidingWindow.accumulator = function(x) {
            if (!arguments.length) {
                return accumulator;
            }
            accumulator = x;
            return slidingWindow;
        };
        slidingWindow.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = x;
            return slidingWindow;
        };

        return slidingWindow;
    }

    // applies an algorithm to an array, merging the result back into
    // the source array using the given merge function.
    function merge() {

        var merge = noop,
            algorithm = calculator();

        var mergeCompute = function(data) {
            return d3.zip(data, algorithm(data))
                .forEach(function(tuple) {
                    merge(tuple[0], tuple[1]);
                });
        };

        mergeCompute.algorithm = function(x) {
            if (!arguments.length) {
                return algorithm;
            }
            algorithm = x;
            return mergeCompute;
        };

        mergeCompute.merge = function(x) {
            if (!arguments.length) {
                return merge;
            }
            merge = x;
            return mergeCompute;
        };

        return mergeCompute;
    }

    function exponentialMovingAverage() {

        var windowSize = 9,
            value = identity;

        var exponentialMovingAverage = function(data) {

            var alpha = 2 / (windowSize + 1);
            var previous;
            var initialAccumulator = 0;

            return data.map(function(d, i) {
                if (i < windowSize - 1) {
                    initialAccumulator += value(d, i);
                    return undefined;
                } else if (i === windowSize - 1) {
                    initialAccumulator += value(d, i);
                    var initialValue = initialAccumulator / windowSize;
                    previous = initialValue;
                    return initialValue;
                } else {
                    var nextValue = value(d, i) * alpha + (1 - alpha) * previous;
                    previous = nextValue;
                    return nextValue;
                }
            });
        };

        exponentialMovingAverage.windowSize = function(x) {
            if (!arguments.length) {
                return windowSize;
            }
            windowSize = x;
            return exponentialMovingAverage;
        };

        exponentialMovingAverage.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = x;
            return exponentialMovingAverage;
        };

        return exponentialMovingAverage;
    }

    function _calculator() {

        var value = identity;

        var highValue = function(d, i) { return d.high; },
            lowValue = function(d, i) { return d.low; };

        var emaComputer = exponentialMovingAverage()
            .windowSize(13);

        var elderRay = function(data) {

            emaComputer.value(value);
            var ema = emaComputer(data);

            var indicator = d3.zip(data, ema)
                .map(function(d) {
                    return {
                        bullPower: d[1] ? highValue(d[0]) - d[1] : undefined,
                        bearPower: d[1] ? lowValue(d[0]) - d[1] : undefined
                    };
                });

            return indicator;
        };

        elderRay.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = x;
            return elderRay;
        };

        elderRay.highValue = function(x) {
            if (!arguments.length) {
                return highValue;
            }
            highValue = x;
            return elderRay;
        };
        elderRay.lowValue = function(x) {
            if (!arguments.length) {
                return highValue;
            }
            lowValue = x;
            return elderRay;
        };

        rebind(elderRay, emaComputer, {
            period: 'windowSize'
        });

        return elderRay;
    }

    function _elderRay() {

        var elderRayAlgorithm = _calculator()
            .value(function(d) { return d.close; });

        var mergedAlgorithm = merge()
                .algorithm(elderRayAlgorithm)
                .merge(function(datum, indicator) { datum.elderRay = indicator; });

        var elderRay = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(elderRay, mergedAlgorithm, 'merge');
        d3.rebind(elderRay, elderRayAlgorithm, 'highValue', 'lowValue', 'period', 'value');

        return elderRay;
    }

    // Indicator algorithms are not designed to accomodate leading 'undefined' value.
    // This adapter adds that functionality by adding a corresponding number
    // of 'undefined' values to the output.
    function undefinedInputAdapter() {

        var algorithm = calculator()
            .accumulator(d3.mean);
        var undefinedValue = d3.functor(undefined),
            defined = function(value) {
                return algorithm.value()(value) == null;
            };

        function undefinedArrayOfLength(length) {
            return Array.apply(null, new Array(length)).map(undefinedValue);
        }

        var undefinedInputAdapter = function(data) {
            var undefinedCount = 0;
            while (defined(data[undefinedCount]) && undefinedCount < data.length) {
                undefinedCount ++;
            }

            var nonUndefinedData = data.slice(undefinedCount);

            return undefinedArrayOfLength(undefinedCount).concat(algorithm(nonUndefinedData));
        };

        undefinedInputAdapter.algorithm = function(x) {
            if (!arguments.length) {
                return algorithm;
            }
            algorithm = x;
            return undefinedInputAdapter;
        };
        undefinedInputAdapter.undefinedValue = function(x) {
            if (!arguments.length) {
                return undefinedValue;
            }
            undefinedValue = d3.functor(x);
            return undefinedInputAdapter;
        };
        undefinedInputAdapter.defined = function(x) {
            if (!arguments.length) {
                return defined;
            }
            defined = x;
            return undefinedInputAdapter;
        };

        return undefinedInputAdapter;
    }

    function envelopeCalculator() {

        var factor = 0.1,
            value = identity;

        var envelope = function(data) {
            return data.map(function(s) {
                return {
                    lower: value(s) * (1.0 - factor),
                    upper: value(s) * (1.0 + factor)
                };
            });
        };

        envelope.factor = function(x) {
            if (!arguments.length) {
                return factor;
            }
            factor = x;
            return envelope;
        };

        envelope.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = d3.functor(x);
            return envelope;
        };

        return envelope;
    }

    function _envelope() {

        var envelopeAlgorithm = envelopeCalculator();

        var adaptedEnvelope = undefinedInputAdapter()
            .undefinedValue({
                lower: undefined,
                upper: undefined
            })
            .algorithm(envelopeAlgorithm);

        var mergedAlgorithm = merge()
                .algorithm(adaptedEnvelope)
                .merge(function(datum, env) { datum.envelope = env; });

        var envelope = function(data) {
            return mergedAlgorithm(data);
        };

        envelope.root = function(d) {
            return d.envelope;
        };

        d3.rebind(envelope, mergedAlgorithm, 'merge');
        d3.rebind(envelope, envelopeAlgorithm, 'value', 'factor');

        return envelope;
    }

    function __calculator() {

        var volumeValue = function(d, i) { return d.volume; },
            closeValue = function(d, i) { return d.close; };

        var slidingWindow = calculator()
            .windowSize(2)
            .accumulator(function(values) {
                return (closeValue(values[1]) - closeValue(values[0])) * volumeValue(values[1]);
            });

        var force = function(data) {
            return slidingWindow(data);
        };

        force.volumeValue = function(x) {
            if (!arguments.length) {
                return volumeValue;
            }
            volumeValue = x;
            return force;
        };
        force.closeValue = function(x) {
            if (!arguments.length) {
                return closeValue;
            }
            closeValue = x;
            return force;
        };

        d3.rebind(force, slidingWindow, 'windowSize');

        return force;
    }

    function _forceIndex() {

        var force = __calculator();

        var mergedAlgorithm = merge()
            .algorithm(force)
            .merge(function(datum, indicator) {
                datum.force = indicator;
            });

        var forceIndex = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(forceIndex, mergedAlgorithm, 'merge');
        d3.rebind(forceIndex, force, 'windowSize', 'volumeValue', 'closeValue');

        return forceIndex;
    }

    function ___calculator() {

        var closeValue = function(d, i) { return d.close; },
            highValue = function(d, i) { return d.high; },
            lowValue = function(d, i) { return d.low; };

        var kWindow = calculator()
            .windowSize(5)
            .accumulator(function(values) {
                var maxHigh = d3.max(values, highValue);
                var minLow = d3.min(values, lowValue);
                return 100 * (closeValue(values[values.length - 1]) - minLow) / (maxHigh - minLow);
            });

        var dWindow = calculator()
            .windowSize(3)
            .accumulator(function(values) {
                if (values[0] === undefined) {
                    return undefined;
                }
                return d3.mean(values);
            });

        var stochastic = function(data) {
            var kValues = kWindow(data);
            var dValues = dWindow(kValues);
            return kValues.map(function(k, i) {
                var d = dValues[i];
                return { k: k, d: d };
            });
        };

        stochastic.closeValue = function(x) {
            if (!arguments.length) {
                return closeValue;
            }
            closeValue = x;
            return stochastic;
        };
        stochastic.highValue = function(x) {
            if (!arguments.length) {
                return highValue;
            }
            highValue = x;
            return stochastic;
        };
        stochastic.lowValue = function(x) {
            if (!arguments.length) {
                return highValue;
            }
            lowValue = x;
            return stochastic;
        };

        rebind(stochastic, kWindow, {
            kWindowSize: 'windowSize'
        });

        rebind(stochastic, dWindow, {
            dWindowSize: 'windowSize'
        });

        return stochastic;
    }

    function _stochasticOscillator() {

        var stoc = ___calculator();

        var mergedAlgorithm = merge()
                .algorithm(stoc)
                .merge(function(datum, indicator) { datum.stochastic = indicator; });

        var stochasticOscillator = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(stochasticOscillator, mergedAlgorithm, 'merge');
        d3.rebind(stochasticOscillator, stoc, 'kWindowSize', 'dWindowSize', 'lowValue', 'closeValue', 'highValue');

        return stochasticOscillator;
    }

    function ____calculator() {

        var openValue = function(d, i) { return d.open; },
            closeValue = function(d, i) { return d.close; },
            averageAccumulator = function(values) {
                var alpha = 1 / values.length;
                var result = values[0];
                for (var i = 1, l = values.length; i < l; i++) {
                    result = alpha * values[i] + (1 - alpha) * result;
                }
                return result;
            };

        var slidingWindow = calculator()
            .windowSize(14)
            .accumulator(function(values) {
                var downCloses = [];
                var upCloses = [];

                for (var i = 0, l = values.length; i < l; i++) {
                    var value = values[i];

                    var open = openValue(value);
                    var close = closeValue(value);

                    downCloses.push(open > close ? open - close : 0);
                    upCloses.push(open < close ? close - open : 0);
                }

                var downClosesAvg = averageAccumulator(downCloses);
                if (downClosesAvg === 0) {
                    return 100;
                }

                var rs = averageAccumulator(upCloses) / downClosesAvg;
                return 100 - (100 / (1 + rs));
            });

        var rsi = function(data) {
            return slidingWindow(data);
        };

        rsi.openValue = function(x) {
            if (!arguments.length) {
                return openValue;
            }
            openValue = x;
            return rsi;
        };
        rsi.closeValue = function(x) {
            if (!arguments.length) {
                return closeValue;
            }
            closeValue = x;
            return rsi;
        };

        d3.rebind(rsi, slidingWindow, 'windowSize');

        return rsi;
    }

    function _relativeStrengthIndex() {

        var rsi = ____calculator();

        var mergedAlgorithm = merge()
                .algorithm(rsi)
                .merge(function(datum, indicator) { datum.rsi = indicator; });

        var relativeStrengthIndex = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(relativeStrengthIndex, mergedAlgorithm, 'merge');
        d3.rebind(relativeStrengthIndex, rsi, 'windowSize', 'openValue', 'closeValue');

        return relativeStrengthIndex;
    }

    function movingAverage() {

        var ma = calculator()
                .accumulator(d3.mean)
                .value(function(d) { return d.close; });

        var mergedAlgorithm = merge()
                .algorithm(ma)
                .merge(function(datum, indicator) { datum.movingAverage = indicator; });

        var movingAverage = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(movingAverage, mergedAlgorithm, 'merge');
        d3.rebind(movingAverage, ma, 'windowSize', 'undefinedValue', 'value');

        return movingAverage;
    }

    function _____calculator() {

        var value = identity;

        var fastEMA = exponentialMovingAverage()
            .windowSize(12);
        var slowEMA = exponentialMovingAverage()
            .windowSize(29);
        var signalEMA = exponentialMovingAverage()
            .windowSize(9);
        var adaptedSignalEMA = undefinedInputAdapter()
            .algorithm(signalEMA);

        var macd = function(data) {

            fastEMA.value(value);
            slowEMA.value(value);

            var diff = d3.zip(fastEMA(data), slowEMA(data))
                .map(function(d) {
                    if (d[0] !== undefined && d[1] !== undefined) {
                        return d[0] - d[1];
                    } else {
                        return undefined;
                    }
                });

            var averageDiff = adaptedSignalEMA(diff);

            return d3.zip(diff, averageDiff)
                .map(function(d) {
                    return {
                        macd: d[0],
                        signal: d[1],
                        divergence: d[0] !== undefined && d[1] !== undefined ? d[0] - d[1] : undefined
                    };
                });
        };

        macd.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = x;
            return macd;
        };

        rebind(macd, fastEMA, {
            fastPeriod: 'windowSize'
        });

        rebind(macd, slowEMA, {
            slowPeriod: 'windowSize'
        });

        rebind(macd, signalEMA, {
            signalPeriod: 'windowSize'
        });

        return macd;
    }

    function _macd() {

        var macdAlgorithm = _____calculator()
            .value(function(d) { return d.close; });

        var mergedAlgorithm = merge()
                .algorithm(macdAlgorithm)
                .merge(function(datum, indicator) { datum.macd = indicator; });

        var macd = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(macd, mergedAlgorithm, 'merge');
        d3.rebind(macd, macdAlgorithm, 'fastPeriod', 'slowPeriod', 'signalPeriod', 'value');

        return macd;
    }

    function _exponentialMovingAverage() {

        var ema = exponentialMovingAverage()
                .value(function(d) { return d.close; });

        var mergedAlgorithm = merge()
                .algorithm(ema)
                .merge(function(datum, indicator) { datum.exponentialMovingAverage = indicator; });

        var exponentialMovingAverage$$ = function(data) {
            return mergedAlgorithm(data);
        };

        d3.rebind(exponentialMovingAverage$$, mergedAlgorithm, 'merge');
        d3.rebind(exponentialMovingAverage$$, ema, 'windowSize', 'value');

        return exponentialMovingAverage$$;
    }

    function percentageChange() {

        var baseIndex = d3.functor(0),
            value = identity;

        var percentageChange = function(data) {

            if (data.length === 0) {
                return [];
            }

            var baseValue = value(data[baseIndex(data)]);

            return data.map(function(d, i) {
                return (value(d, i) - baseValue) / baseValue;
            });
        };

        percentageChange.baseIndex = function(x) {
            if (!arguments.length) {
                return baseIndex;
            }
            baseIndex = d3.functor(x);
            return percentageChange;
        };
        percentageChange.value = function(x) {
            if (!arguments.length) {
                return value;
            }
            value = x;
            return percentageChange;
        };

        return percentageChange;
    }

    function _bollingerBands() {

        var multiplier = 2;

        var slidingWindow = calculator()
            .undefinedValue({
                upper: undefined,
                average: undefined,
                lower: undefined
            })
            .accumulator(function(values) {
                var avg = d3.mean(values);
                var stdDev = d3.deviation(values);
                return {
                    upper: avg + multiplier * stdDev,
                    average: avg,
                    lower: avg - multiplier * stdDev
                };
            });

        var bollingerBands = function(data) {
            return slidingWindow(data);
        };

        bollingerBands.multiplier = function(x) {
            if (!arguments.length) {
                return multiplier;
            }
            multiplier = x;
            return bollingerBands;
        };

        d3.rebind(bollingerBands, slidingWindow, 'windowSize', 'value');

        return bollingerBands;
    }

    var ______calculator = {
        bollingerBands: _bollingerBands,
        exponentialMovingAverage: exponentialMovingAverage,
        macd: _____calculator,
        percentageChange: percentageChange,
        relativeStrengthIndex: ____calculator,
        stochasticOscillator: ___calculator,
        slidingWindow: calculator,
        undefinedInputAdapter: undefinedInputAdapter,
        forceIndex: __calculator,
        envelope: envelopeCalculator,
        elderRay: _calculator
    };

    function __bollingerBands() {

        var bollingerAlgorithm = _bollingerBands()
            .value(function(d) { return d.close; });

        var mergedAlgorithm = merge()
                .algorithm(bollingerAlgorithm)
                .merge(function(datum, indicator) { datum.bollingerBands = indicator; });

        var bollingerBands = function(data) {
            return mergedAlgorithm(data);
        };

        bollingerBands.root = function(d) {
            return d.bollingerBands;
        };

        d3.rebind(bollingerBands, mergedAlgorithm, 'merge');
        d3.rebind(bollingerBands, bollingerAlgorithm, 'windowSize', 'value', 'multiplier');

        return bollingerBands;
    }

    var _algorithm = {
        bollingerBands: __bollingerBands,
        calculator: ______calculator,
        exponentialMovingAverage: _exponentialMovingAverage,
        macd: _macd,
        merge: merge,
        movingAverage: movingAverage,
        relativeStrengthIndex: _relativeStrengthIndex,
        stochasticOscillator: _stochasticOscillator,
        forceIndex: _forceIndex,
        envelope: _envelope,
        elderRay: _elderRay
    };

    var _indicator = {
        algorithm: _algorithm,
        renderer: renderer
    };

    function bucket() {

        var bucketSize = 10;

        var bucket = function(data) {
            var numberOfBuckets = Math.ceil(data.length / bucketSize);

            var buckets = [];
            for (var i = 0; i < numberOfBuckets; i++) {
                buckets.push(data.slice(i * bucketSize, (i + 1) * bucketSize));
            }
            return buckets;
        };

        bucket.bucketSize = function(x) {
            if (!arguments.length) {
                return bucketSize;
            }

            bucketSize = x;
            return bucket;
        };

        return bucket;
    }

    function largestTriangleOneBucket() {

        var dataBucketer = bucket(),
            x = identity,
            y = identity;

        var largestTriangleOneBucket = function(data) {

            if (dataBucketer.bucketSize() >= data.length) {
                return data;
            }

            var pointAreas = calculateAreaOfPoints(data);
            var pointAreaBuckets = dataBucketer(pointAreas);

            var buckets = dataBucketer(data.slice(1, data.length - 1));

            var subsampledData = buckets.map(function(thisBucket, i) {

                var pointAreaBucket = pointAreaBuckets[i];
                var maxArea = d3.max(pointAreaBucket);
                var currentMaxIndex = pointAreaBucket.indexOf(maxArea);

                return thisBucket[currentMaxIndex];
            });

            // First and last data points are their own buckets.
            return [].concat(data[0], subsampledData, data[data.length - 1]);
        };

        function calculateAreaOfPoints(data) {

            var xyData = data.map(function(point) {
                return [x(point), y(point)];
            });

            var pointAreas = [];

            for (var i = 1; i < xyData.length - 1; i++) {
                var lastPoint = xyData[i - 1];
                var thisPoint = xyData[i];
                var nextPoint = xyData[i + 1];

                var base = (lastPoint[0] - nextPoint[0]) * (thisPoint[1] - lastPoint[1]);
                var height = (lastPoint[0] - thisPoint[0]) * (nextPoint[1] - lastPoint[1]);

                var area = Math.abs(0.5 * base * height);

                pointAreas.push(area);
            }

            return pointAreas;
        }

        d3.rebind(largestTriangleOneBucket, dataBucketer, 'bucketSize');

        largestTriangleOneBucket.x = function(d) {
            if (!arguments.length) {
                return x;
            }

            x = d;

            return largestTriangleOneBucket;
        };

        largestTriangleOneBucket.y = function(d) {
            if (!arguments.length) {
                return y;
            }

            y = d;

            return largestTriangleOneBucket;
        };

        return largestTriangleOneBucket;
    }

    function largestTriangleThreeBucket() {

        var x = identity,
            y = identity,
            dataBucketer = bucket();

        var largestTriangleThreeBucket = function(data) {

            if (dataBucketer.bucketSize() >= data.length) {
                return data;
            }

            var buckets = dataBucketer(data.slice(1, data.length - 1));
            var firstBucket = data[0];
            var lastBucket = data[data.length - 1];

            // Keep track of the last selected bucket info and all buckets
            // (for the next bucket average)
            var allBuckets = [].concat(firstBucket, buckets, lastBucket);

            var lastSelectedX = x(firstBucket),
                lastSelectedY = y(firstBucket);

            var subsampledData = buckets.map(function(thisBucket, i) {

                var highestArea = -Infinity;
                var highestItem;
                var nextAvgX = d3.mean(allBuckets[i + 1], x);
                var nextAvgY = d3.mean(allBuckets[i + 1], y);

                for (var j = 0; j < thisBucket.length; j++) {
                    var thisX = x(thisBucket[j]),
                        thisY = y(thisBucket[j]);

                    var base = (lastSelectedX - nextAvgX) * (thisY - lastSelectedY);
                    var height = (lastSelectedX - thisX) * (nextAvgY - lastSelectedY);

                    var area = Math.abs(0.5 * base * height);

                    if (area > highestArea) {
                        highestArea = area;
                        highestItem = thisBucket[j];
                    }
                }

                lastSelectedX = x(highestItem);
                lastSelectedY = y(highestItem);

                return highestItem;
            });

            // First and last data points are their own buckets.
            return [].concat(data[0], subsampledData, data[data.length - 1]);
        };

        d3.rebind(largestTriangleThreeBucket, dataBucketer, 'bucketSize');

        largestTriangleThreeBucket.x = function(d) {
            if (!arguments.length) {
                return x;
            }

            x = d;

            return largestTriangleThreeBucket;
        };

        largestTriangleThreeBucket.y = function(d) {
            if (!arguments.length) {
                return y;
            }

            y = d;

            return largestTriangleThreeBucket;
        };

        return largestTriangleThreeBucket;
    }

    function modeMedian() {

        var dataBucketer = bucket(),
            value = identity;

        var modeMedian = function(data) {

            if (dataBucketer.bucketSize() > data.length) {
                return data;
            }

            var minMax = d3.extent(data);
            var buckets = dataBucketer(data.slice(1, data.length - 1));

            var subsampledData = buckets.map(function(thisBucket, i) {

                var frequencies = {};
                var mostFrequent;
                var mostFrequentIndex;
                var singleMostFrequent = true;

                for (var j = 0; j < thisBucket.length; j++) {
                    var item = value(thisBucket[j]);
                    if (item === minMax[0] || item === minMax[1]) {
                        return thisBucket[j];
                    }

                    if (frequencies[item] === undefined) {
                        frequencies[item] = 0;
                    }
                    frequencies[item]++;

                    if (frequencies[item] > frequencies[mostFrequent] || mostFrequent === undefined) {
                        mostFrequent = item;
                        mostFrequentIndex = j;
                        singleMostFrequent = true;
                    } else if (frequencies[item] === frequencies[mostFrequent]) {
                        singleMostFrequent = false;
                    }
                }

                if (singleMostFrequent) {
                    return thisBucket[mostFrequentIndex];
                } else {
                    return thisBucket[Math.floor(thisBucket.length / 2)];
                }
            });

            // First and last data points are their own buckets.
            return [].concat(data[0], subsampledData, data[data.length - 1]);
        };

        modeMedian.bucketSize = function() {
            dataBucketer.bucketSize.apply(this, arguments);
            return modeMedian;
        };

        modeMedian.value = function(x) {
            if (!arguments.length) {
                return value;
            }

            value = x;

            return modeMedian;
        };

        return modeMedian;
    }

    var sampler = {
        modeMedian: modeMedian,
        largestTriangleThreeBucket: largestTriangleThreeBucket,
        largestTriangleOneBucket: largestTriangleOneBucket,
        bucket: bucket
    };

    // the D3 CSV loader / parser converts each row into an object with property names
    // derived from the headings in the CSV. The spread component converts this into an
    // array of series; one per column (vertical spread), or one per row (horizontal spread).
    function spread() {

        var xValueKey = '',
            orient = 'vertical',
            yValue = function(row, key) {
                // D3 CSV returns all values as strings, this converts them to numbers
                // by default.
                return Number(row[key]);
            };

        function verticalSpread(data) {
            var series = Object.keys(data[0])
                .filter(function(key) {
                    return key !== xValueKey;
                })
                .map(function(key) {
                    var values = data.filter(function(row) {
                        return row[key];
                    }).map(function(row) {
                        return {
                            x: row[xValueKey],
                            y: yValue(row, key)
                        };
                    });
                    return {
                        key: key,
                        values: values
                    };
                });

            return series;
        }

        function horizontalSpread(data) {

            var series = data.map(function(row) {
                var keys = Object.keys(row).filter(function(d) {
                    return d !== xValueKey;
                });

                return {
                    key: row[xValueKey],
                    values: keys.map(function(key) {
                        return {
                            x: key,
                            y: yValue(row, key)
                        };
                    })
                };
            });

            return series;
        }

        var spread = function(data) {
            return orient === 'vertical' ? verticalSpread(data) : horizontalSpread(data);
        };

        spread.xValueKey = function(x) {
            if (!arguments.length) {
                return xValueKey;
            }
            xValueKey = x;
            return spread;
        };

        spread.yValue = function(x) {
            if (!arguments.length) {
                return yValue;
            }
            yValue = x;
            return spread;
        };

        spread.orient = function(x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x;
            return spread;
        };

        return spread;
    }

    function walk() {
        var period = 1,
            steps = 20,
            mu = 0.1,
            sigma = 0.1;

        var walk = function(initial) {
            var randomNormal = d3.random.normal(),
                timeStep = period / steps,
                increments = new Array(steps + 1),
                increment,
                step;

            // Compute step increments for the discretized GBM model.
            for (step = 1; step < increments.length; step += 1) {
                increment = randomNormal();
                increment *= Math.sqrt(timeStep);
                increment *= sigma;
                increment += (mu - ((sigma * sigma) / 2)) * timeStep;
                increments[step] = Math.exp(increment);
            }
            // Return the cumulative product of increments from initial value.
            increments[0] = initial;
            for (step = 1; step < increments.length; step += 1) {
                increments[step] = increments[step - 1] * increments[step];
            }
            return increments;
        };

        walk.period = function(x) {
            if (!arguments.length) {
                return period;
            }
            period = x;
            return walk;
        };

        walk.steps = function(x) {
            if (!arguments.length) {
                return steps;
            }
            steps = x;
            return walk;
        };

        walk.mu = function(x) {
            if (!arguments.length) {
                return mu;
            }
            mu = x;
            return walk;
        };

        walk.sigma = function(x) {
            if (!arguments.length) {
                return sigma;
            }
            sigma = x;
            return walk;
        };

        return walk;
    }

    function financial() {

        var mu = 0.1,
            sigma = 0.1,
            startPrice = 100,
            startVolume = 100000,
            startDate = new Date(),
            stepsPerDay = 50,
            volumeNoiseFactor = 0.3,
            filter = function(d) { return true; };

        var calculateOHLC = function(days, prices, volumes) {

            var ohlcv = [],
                daySteps,
                currentStep = 0,
                currentIntraStep = 0;

            while (ohlcv.length < days) {
                daySteps = prices.slice(currentIntraStep, currentIntraStep + stepsPerDay);
                ohlcv.push({
                    date: new Date(startDate.getTime()),
                    open: daySteps[0],
                    high: Math.max.apply({}, daySteps),
                    low: Math.min.apply({}, daySteps),
                    close: daySteps[stepsPerDay - 1],
                    volume: volumes[currentStep]
                });
                currentIntraStep += stepsPerDay;
                currentStep += 1;
                startDate.setUTCDate(startDate.getUTCDate() + 1);
            }
            return ohlcv;
        };

        function calculateInterval(start, days) {
            var millisecondsPerYear = 3.15569e10;

            var toDate = new Date(start.getTime());
            toDate.setUTCDate(start.getUTCDate() + days);

            return {
                toDate: toDate,
                years: (toDate.getTime() - start.getTime()) / millisecondsPerYear
            };
        }

        function dataGenerator(days, years) {

            var prices = walk()
                .period(years)
                .steps(days * stepsPerDay)
                .mu(mu)
                .sigma(sigma)(startPrice);

            var volumes = walk()
                .period(years)
                .steps(days)
                .mu(0)
                .sigma(sigma)(startVolume);

            // Add random noise
            volumes = volumes.map(function(vol) {
                var boundedNoiseFactor = Math.min(0, Math.max(volumeNoiseFactor, 1));
                var multiplier = 1 + (boundedNoiseFactor * (1 - 2 * Math.random()));
                return Math.floor(vol * multiplier);
            });

            // Save the new start values
            startPrice = prices[prices.length - 1];
            startVolume = volumes[volumes.length - 1];

            return calculateOHLC(days, prices, volumes).filter(function(d) {
                return filter(d.date);
            });
        }

        var gen = function(days) {
            var date = startDate,
                remainingDays = days,
                result = [],
                interval;

            do {
                interval = calculateInterval(date, remainingDays);
                result = result.concat(dataGenerator(remainingDays, interval.years));
                date = interval.toDate;
                remainingDays = days - result.length;
            }
            while (result.length < days);

            return result;
        };

        gen.mu = function(x) {
            if (!arguments.length) {
                return mu;
            }
            mu = x;
            return gen;
        };
        gen.sigma = function(x) {
            if (!arguments.length) {
                return sigma;
            }
            sigma = x;
            return gen;
        };
        gen.startPrice = function(x) {
            if (!arguments.length) {
                return startPrice;
            }
            startPrice = x;
            return gen;
        };
        gen.startVolume = function(x) {
            if (!arguments.length) {
                return startVolume;
            }
            startVolume = x;
            return gen;
        };
        gen.startDate = function(x) {
            if (!arguments.length) {
                return startDate;
            }
            startDate = x;
            return gen;
        };
        gen.stepsPerDay = function(x) {
            if (!arguments.length) {
                return stepsPerDay;
            }
            stepsPerDay = x;
            return gen;
        };
        gen.volumeNoiseFactor = function(x) {
            if (!arguments.length) {
                return volumeNoiseFactor;
            }
            volumeNoiseFactor = x;
            return gen;
        };
        gen.filter = function(x) {
            if (!arguments.length) {
                return filter;
            }
            filter = x;
            return gen;
        };

        return gen;
    }

    function skipWeekends() {
        return function(date) {
            var day = date.getDay();
            return !(day === 0 || day === 6);
        };
    }

    var random = {
        filter: {
            skipWeekends: skipWeekends
        },
        financial: financial,
        walk: walk
    };

    //  https://www.quandl.com/docs/api#datasets
    function quandl() {

        function defaultColumnNameMap(colName) {
            return colName[0].toLowerCase() + colName.substr(1);
        }

        var database = 'YAHOO',
            dataset = 'GOOG',
            apiKey = null,
            start = null,
            end = null,
            rows = null,
            descending = false,
            collapse = null,
            columnNameMap = defaultColumnNameMap;

        var quandl = function(cb) {
            var params = [];
            if (apiKey != null) {
                params.push('api_key=' + apiKey);
            }
            if (start != null) {
                params.push('start_date=' + start.toISOString().substring(0, 10));
            }
            if (end != null) {
                params.push('end_date=' + end.toISOString().substring(0, 10));
            }
            if (rows != null) {
                params.push('rows=' + rows);
            }
            if (!descending) {
                params.push('order=asc');
            }
            if (collapse != null) {
                params.push('collapse=' + collapse);
            }

            var url = 'https://www.quandl.com/api/v3/datasets/' + database + '/' + dataset + '/data.json?' + params.join('&');

            d3.json(url, function(error, data) {
                if (error) {
                    cb(error);
                    return;
                }

                var datasetData = data.dataset_data;

                var nameMapping = columnNameMap || function(n) { return n; };
                var colNames = datasetData.column_names
                    .map(function(n, i) { return [i, nameMapping(n)]; })
                    .filter(function(v) { return v[1]; });

                var mappedData = datasetData.data.map(function(d) {
                    var output = {};
                    colNames.forEach(function(v) {
                        output[v[1]] = v[0] === 0 ? new Date(d[v[0]]) : d[v[0]];
                    });
                    return output;
                });

                cb(error, mappedData);
            });
        };

        // Unique Database Code (e.g. WIKI)
        quandl.database = function(x) {
            if (!arguments.length) {
                return database;
            }
            database = x;
            return quandl;
        };
        // Unique Dataset Code (e.g. AAPL)
        quandl.dataset = function(x) {
            if (!arguments.length) {
                return dataset;
            }
            dataset = x;
            return quandl;
        };
        // Set To Use API Key In Request (needed for premium set or high frequency requests)
        quandl.apiKey = function(x) {
            if (!arguments.length) {
                return apiKey;
            }
            apiKey = x;
            return quandl;
        };
        // Start Date of Data Series
        quandl.start = function(x) {
            if (!arguments.length) {
                return start;
            }
            start = x;
            return quandl;
        };
        // End Date of Data Series
        quandl.end = function(x) {
            if (!arguments.length) {
                return end;
            }
            end = x;
            return quandl;
        };
        // Limit Number of Rows
        quandl.rows = function(x) {
            if (!arguments.length) {
                return rows;
            }
            rows = x;
            return quandl;
        };
        // Return Results In Descending Order (true) or Ascending (false)
        quandl.descending = function(x) {
            if (!arguments.length) {
                return descending;
            }
            descending = x;
            return quandl;
        };
        // Periodicity of Data (daily | weekly | monthly | quarterly | annual)
        quandl.collapse = function(x) {
            if (!arguments.length) {
                return collapse;
            }
            collapse = x;
            return quandl;
        };
        // Function Used to Normalise the Quandl Column Name To Field Name, Return Null To Skip Field
        quandl.columnNameMap = function(x) {
            if (!arguments.length) {
                return columnNameMap;
            }
            columnNameMap = x;
            return quandl;
        };
        // Expose default column name map
        quandl.defaultColumnNameMap = defaultColumnNameMap;

        return quandl;
    }

    // https://docs.exchange.coinbase.com/#market-data
    function coinbase() {

        var product = 'BTC-USD',
            start = null,
            end = null,
            granularity = null;

        var coinbase = function(cb) {
            var params = [];
            if (start != null) {
                params.push('start=' + start.toISOString());
            }
            if (end != null) {
                params.push('end=' + end.toISOString());
            }
            if (granularity != null) {
                params.push('granularity=' + granularity);
            }
            var url = 'https://api.exchange.coinbase.com/products/' + product + '/candles?' + params.join('&');
            d3.json(url, function(error, data) {
                if (error) {
                    cb(error);
                    return;
                }
                data = data.map(function(d) {
                    return {
                        date: new Date(d[0] * 1000),
                        open: d[3],
                        high: d[2],
                        low: d[1],
                        close: d[4],
                        volume: d[5]
                    };
                });
                cb(error, data);
            });
        };

        coinbase.product = function(x) {
            if (!arguments.length) {
                return product;
            }
            product = x;
            return coinbase;
        };
        coinbase.start = function(x) {
            if (!arguments.length) {
                return start;
            }
            start = x;
            return coinbase;
        };
        coinbase.end = function(x) {
            if (!arguments.length) {
                return end;
            }
            end = x;
            return coinbase;
        };
        coinbase.granularity = function(x) {
            if (!arguments.length) {
                return granularity;
            }
            granularity = x;
            return coinbase;
        };

        return coinbase;
    }

    var feed = {
        coinbase: coinbase,
        quandl: quandl
    };

    var _data = {
        feed: feed,
        random: random,
        spread: spread,
        sampler: sampler
    };

    function smallMultiples(xScale, yScale) {

        xScale = xScale || d3.scale.linear();
        yScale = yScale || d3.scale.linear();

        var padding = 10,
            columns = 9,
            decorate = noop,
            plotArea = _line(),
            margin = {
                bottom: 30,
                right: 30
            },
            values = function(d) { return d.values; },
            key = function(d) { return d.key; };

        var xAxis = axis()
            .ticks(2);
        var yAxis = axis()
            .orient('right')
            .ticks(3);

        function classedDataJoin(clazz) {
            return dataJoinUtil()
                .selector('g.' + clazz)
                .element('g')
                .attr('class', clazz);
        }

        var dataJoin = classedDataJoin('multiple'),
            xAxisDataJoin = classedDataJoin('x-axis'),
            yAxisDataJoin = classedDataJoin('y-axis');

        var multiples = function(selection) {
            selection.each(function(data, index) {

                var container = d3.select(this);

                var expandedMargin = expandRect(margin);
                expandedMargin.position = 'absolute';

                var svg = container.selectAll('svg')
                    .data([data]);
                svg.enter()
                    .append('svg')
                    .layout('flex', 1)
                    .append('g')
                    .attr('class', 'multiples-chart');

                var plotAreaContainer = svg.select('g')
                    .layout(expandedMargin);

                container.layout();

                var rows = Math.ceil(data.length / columns);
                var multipleWidth = plotAreaContainer.layout('width') / columns - padding;
                var multipleHeight = plotAreaContainer.layout('height') / rows - padding;

                function translationForMultiple(row, column) {
                    return {
                        xOffset: (multipleWidth + padding) * row,
                        yOffset: (multipleHeight + padding) * column
                    };
                }

                setRange(xScale, [0, multipleWidth]);
                setRange(yScale, [multipleHeight, 0]);

                plotArea.xScale(xScale)
                    .yScale(yScale);

                // create a container for each multiple chart
                var multipleContainer = dataJoin(plotAreaContainer, data);
                multipleContainer.attr('transform', function(d, i) {
                    var translation = translationForMultiple(i % columns, Math.floor(i / columns));
                    return 'translate(' + translation.xOffset + ',' + translation.yOffset + ')';
                });

                // within each, add an inner 'g' and background rect
                var inner = multipleContainer.enter()
                    .append('g');
                inner.append('rect')
                    .attr('class', 'background');
                inner.append('g')
                    .attr('transform', 'translate(' + (multipleWidth / 2) + ', 0)')
                    .append('text')
                    .attr('class', 'label')
                    .text(key);

                // on update, call the plotArea and size the rect element
                multipleContainer.select('g')
                    .datum(values)
                    .call(plotArea);
                multipleContainer.select('rect')
                    .attr({width: multipleWidth, height: multipleHeight});

                decorate(multipleContainer, data, index);

                var xAxisContainer = xAxisDataJoin(plotAreaContainer, d3.range(columns));
                xAxisContainer.attr('transform', function(d, i) {
                    var row = xAxis.orient() === 'bottom' ? rows : 0;
                    var offset = xAxis.orient() === 'bottom' ? 0 : -padding;
                    var translation = translationForMultiple(i, row);
                    return 'translate(' + translation.xOffset + ',' + (translation.yOffset + offset) + ')';
                });
                xAxis.scale(xScale);
                xAxisContainer.call(xAxis);

                var yAxisContainer = yAxisDataJoin(plotAreaContainer, d3.range(rows));
                yAxisContainer.attr('transform', function(d, i) {
                    var column = yAxis.orient() === 'left' ? 0 : columns;
                    var offset = yAxis.orient() === 'left' ? -padding : 0;
                    var translation = translationForMultiple(column, i);
                    return 'translate(' + (translation.xOffset + offset) + ',' + translation.yOffset + ')';
                });
                yAxis.scale(yScale);
                yAxisContainer.call(yAxis);
            });
        };

        var scaleExclusions = [
            /range\w*/,   // the scale range is set via the component layout
            /tickFormat/  // use axis.tickFormat instead (only present on linear scales)
        ];
        rebindAll(multiples, xScale, 'x', scaleExclusions);
        rebindAll(multiples, yScale, 'y', scaleExclusions);

        rebindAll(multiples, xAxis, 'x');
        rebindAll(multiples, yAxis, 'y');

        multiples.columns = function(x) {
            if (!arguments.length) {
                return columns;
            }
            columns = x;
            return multiples;
        };

        multiples.margin = function(x) {
            if (!arguments.length) {
                return margin;
            }
            margin = x;
            return multiples;
        };

        multiples.padding = function(x) {
            if (!arguments.length) {
                return padding;
            }
            padding = x;
            return multiples;
        };

        multiples.plotArea = function(x) {
            if (!arguments.length) {
                return plotArea;
            }
            plotArea = x;
            return multiples;
        };

        multiples.values = function(x) {
            if (!arguments.length) {
                return values;
            }
            values = x;
            return multiples;
        };

        multiples.key = function(x) {
            if (!arguments.length) {
                return key;
            }
            key = x;
            return multiples;
        };

        multiples.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return multiples;
        };

        return multiples;
    }

    function tooltip() {

        var split = 50,
            decorate = noop;

        var items = [
            ['datum:', function(d) { return d.datum; }]
        ];

        var dataJoin = dataJoinUtil()
            .selector('g.cell')
            .element('g')
            .attr('class', 'cell tooltip');

        var tooltip = function(selection) {
            selection.each(function(data, index) {
                var container = d3.select(this);

                var legendData = items.map(function(item, i) {
                    return {
                        datum: data,
                        label: d3.functor(item[0]),
                        value: d3.functor(item[1])
                    };
                });

                var g = dataJoin(container, legendData);

                g.enter()
                    .layout({
                        'flex': 1,
                        'flexDirection': 'row'
                    });

                g.enter().append('text')
                    .attr('class', 'label')
                    .layout('flex', split);
                g.enter().append('text')
                    .attr('class', 'value')
                    .layout('flex', 100 - split);

                g.select('.label')
                    .text(function(d, i) {
                        return d.label.call(this, d.datum, i);
                    });

                g.select('.value')
                    .text(function(d, i) {
                        return d.value.call(this, d.datum, i);
                    });

                decorate(g, data, index);

                container.layout();
            });
        };

        tooltip.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return tooltip;
        };

        tooltip.split = function(x) {
            if (!arguments.length) {
                return split;
            }
            split = x;
            return tooltip;
        };

        tooltip.items = function(x) {
            if (!arguments.length) {
                return items;
            }
            items = x;
            return tooltip;
        };

        return tooltip;
    }

    function sparkline() {

        // creates an array with four elements, representing the high, low, open and close
        // values of the given array
        function highLowOpenClose(data) {
            var xValueAccessor = sparkline.xValue(),
                yValueAccessor = sparkline.yValue();

            var high = d3.max(data, yValueAccessor);
            var low = d3.min(data, yValueAccessor);

            function elementWithYValue(value) {
                return data.filter(function(d) {
                    return yValueAccessor(d) === value;
                })[0];
            }

            return [{
                x: xValueAccessor(data[0]),
                y: yValueAccessor(data[0])
            }, {
                x: xValueAccessor(elementWithYValue(high)),
                y: high
            }, {
                x: xValueAccessor(elementWithYValue(low)),
                y: low
            }, {
                x: xValueAccessor(data[data.length - 1]),
                y: yValueAccessor(data[data.length - 1])
            }];
        }

        var xScale = exportedScale();
        var yScale = d3.scale.linear();
        var radius = 2;
        var line = _line();

        // configure the point series to render the data from the
        // highLowOpenClose function
        var point = _point()
            .xValue(function(d) { return d.x; })
            .yValue(function(d) { return d.y; })
            .decorate(function(sel) {
                sel.attr('class', function(d, i) {
                    switch (i) {
                    case 0: return 'open';
                    case 1: return 'high';
                    case 2: return 'low';
                    case 3: return 'close';
                    }
                });
            });

        var multi = _multi()
            .series([line, point])
            .mapping(function(series) {
                switch (series) {
                case point:
                    return highLowOpenClose(this);
                default:
                    return this;
                }
            });

        var sparkline = function(selection) {

            point.size(radius * radius * Math.PI);

            selection.each(function(data) {

                var container = d3.select(this);
                var dimensions = innerDimensions(this);
                var margin = radius;

                xScale.range([margin, dimensions.width - margin]);
                yScale.range([dimensions.height - margin, margin]);

                multi.xScale(xScale)
                    .yScale(yScale);

                container.call(multi);

            });
        };

        rebind(sparkline, xScale, {
            xDiscontinuityProvider: 'discontinuityProvider',
            xDomain: 'domain'
        });

        rebind(sparkline, yScale, {
            yDomain: 'domain'
        });

        rebind(sparkline, line, 'xValue', 'yValue');

        sparkline.xScale = function() { return xScale; };
        sparkline.yScale = function() { return yScale; };
        sparkline.radius = function(x) {
            if (!arguments.length) {
                return radius;
            }
            radius = x;
            return sparkline;
        };

        return sparkline;
    }

    function cartesian(xScale, yScale) {

        xScale = xScale || d3.scale.linear();
        yScale = yScale || d3.scale.linear();

        var margin = {
                bottom: 30,
                right: 30
            },
            yLabel = '',
            xLabel = '',
            xBaseline = null,
            yBaseline = null,
            chartLabel = '',
            plotArea = _line(),
            decorate = noop;

        // Each axis-series has a cross-scale which is defined as an identity
        // scale. If no baseline function is supplied, the axis is positioned
        // using the cross-scale range extents. If a baseline function is supplied
        // it is transformed via the respective scale.
        var xAxis = _axis()
            .orient('bottom')
            .baseline(function() {
                if (xBaseline !== null) {
                    return yScale(xBaseline.apply(this, arguments));
                } else {
                    var r = range(yScale);
                    return xAxis.orient() === 'bottom' ? r[0] : r[1];
                }
            });

        var yAxis = _axis()
            .orient('right')
            .baseline(function() {
                if (yBaseline !== null) {
                    return xScale(yBaseline.apply(this, arguments));
                } else {
                    var r = range(xScale);
                    return yAxis.orient() === 'left' ? r[0] : r[1];
                }
            });

        var containerDataJoin = dataJoinUtil()
            .selector('svg.cartesian-chart')
            .element('svg')
            .attr({'class': 'cartesian-chart', 'layout-style': 'flex: 1'});


        var cartesian = function(selection) {

            selection.each(function(data, index) {

                var container = d3.select(this);

                var svg = containerDataJoin(container, [data]);
                svg.enter().html(
                    '<g class="plot-area-container"> \
                        <rect class="background" \
                            layout-style="position: absolute; top: 0; bottom: 0; left: 0; right: 0"/> \
                        <g class="axes-container" \
                            layout-style="position: absolute; top: 0; bottom: 0; left: 0; right: 0"> \
                            <g class="x-axis" layout-style="height: 0; width: 0"/> \
                            <g class="y-axis" layout-style="height: 0; width: 0"/> \
                        </g> \
                        <svg class="plot-area" \
                            layout-style="position: absolute; top: 0; bottom: 0; left: 0; right: 0"/> \
                    </g> \
                    <g class="x-axis label-container"> \
                        <g layout-style="height: 0; width: 0"> \
                            <text class="label"/> \
                        </g> \
                    </g> \
                    <g class="y-axis label-container"> \
                        <g layout-style="height: 0; width: 0"> \
                            <text class="label"/> \
                        </g> \
                    </g> \
                    <g class="title label-container"> \
                        <g layout-style="height: 0; width: 0"> \
                            <text class="label"/> \
                        </g> \
                    </g>');

                var expandedMargin = expandRect(margin);

                svg.select('.plot-area-container')
                    .layout({
                        position: 'absolute',
                        top: expandedMargin.top,
                        left: expandedMargin.left,
                        bottom: expandedMargin.bottom,
                        right: expandedMargin.right
                    });

                svg.select('.title')
                    .layout({
                        position: 'absolute',
                        top: 0,
                        alignItems: 'center',
                        left: expandedMargin.left,
                        right: expandedMargin.right
                    });

                var yAxisLayout = {
                    position: 'absolute',
                    top: expandedMargin.top,
                    bottom: expandedMargin.bottom,
                    alignItems: 'center',
                    flexDirection: 'row'
                };
                yAxisLayout[yAxis.orient()] = 0;
                svg.select('.y-axis.label-container')
                    .attr('class', 'y-axis label-container ' + yAxis.orient())
                    .layout(yAxisLayout);

                var xAxisLayout = {
                    position: 'absolute',
                    left: expandedMargin.left,
                    right: expandedMargin.right,
                    alignItems: 'center'
                };
                xAxisLayout[xAxis.orient()] = 0;
                svg.select('.x-axis.label-container')
                    .attr('class', 'x-axis label-container ' + xAxis.orient())
                    .layout(xAxisLayout);

                // perform the flexbox / css layout
                container.layout();

                // update the label text
                svg.select('.title .label')
                    .text(chartLabel);

                svg.select('.y-axis.label-container .label')
                    .text(yLabel)
                    .attr('transform', yAxis.orient() === 'right' ? 'rotate(90)' : 'rotate(-90)');

                svg.select('.x-axis.label-container .label')
                    .text(xLabel);

                // set the axis ranges
                var plotAreaContainer = svg.select('.plot-area');
                setRange(xScale, [0, plotAreaContainer.layout('width')]);
                setRange(yScale, [plotAreaContainer.layout('height'), 0]);

                // render the axes
                xAxis.xScale(xScale)
                    .yScale(d3.scale.identity());

                yAxis.yScale(yScale)
                    .xScale(d3.scale.identity());

                svg.select('.axes-container .x-axis')
                    .call(xAxis);

                svg.select('.axes-container .y-axis')
                    .call(yAxis);

                // render the plot area
                plotArea.xScale(xScale)
                    .yScale(yScale);
                plotAreaContainer.call(plotArea);

                decorate(svg, data, index);
            });
        };

        var scaleExclusions = [
            /range\w*/,   // the scale range is set via the component layout
            /tickFormat/  // use axis.tickFormat instead (only present on linear scales)
        ];
        rebindAll(cartesian, xScale, 'x', scaleExclusions);
        rebindAll(cartesian, yScale, 'y', scaleExclusions);

        var axisExclusions = [
            'baseline',         // the axis baseline is adapted so is not exposed directly
            'xScale', 'yScale'  // these are set by this components
        ];
        rebindAll(cartesian, xAxis, 'x', axisExclusions);
        rebindAll(cartesian, yAxis, 'y', axisExclusions);

        cartesian.xBaseline = function(x) {
            if (!arguments.length) {
                return xBaseline;
            }
            xBaseline = d3.functor(x);
            return cartesian;
        };
        cartesian.yBaseline = function(x) {
            if (!arguments.length) {
                return yBaseline;
            }
            yBaseline = d3.functor(x);
            return cartesian;
        };
        cartesian.chartLabel = function(x) {
            if (!arguments.length) {
                return chartLabel;
            }
            chartLabel = x;
            return cartesian;
        };
        cartesian.plotArea = function(x) {
            if (!arguments.length) {
                return plotArea;
            }
            plotArea = x;
            return cartesian;
        };
        cartesian.xLabel = function(x) {
            if (!arguments.length) {
                return xLabel;
            }
            xLabel = x;
            return cartesian;
        };
        cartesian.margin = function(x) {
            if (!arguments.length) {
                return margin;
            }
            margin = x;
            return cartesian;
        };
        cartesian.yLabel = function(x) {
            if (!arguments.length) {
                return yLabel;
            }
            yLabel = x;
            return cartesian;
        };
        cartesian.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return cartesian;
        };

        return cartesian;
    }

    var chart = {
        cartesian: cartesian,
        sparkline: sparkline,
        tooltip: tooltip,
        smallMultiples: smallMultiples
    };

    function gridline() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            xTicks = 10,
            yTicks = 10;

        var xDecorate = noop,
            yDecorate = noop;

        var xLineDataJoin = dataJoinUtil()
            .selector('line.x')
            .element('line')
            .attr('class', 'x gridline');

        var yLineDataJoin = dataJoinUtil()
            .selector('line.y')
            .element('line')
            .attr('class', 'y gridline');

        var gridlines = function(selection) {

            selection.each(function(data, index) {

                var xData = xScale.ticks(xTicks);
                var xLines = xLineDataJoin(this, xData);

                xLines.attr({
                    'x1': xScale,
                    'x2': xScale,
                    'y1': yScale.range()[0],
                    'y2': yScale.range()[1]
                });

                xDecorate(xLines, xData, index);

                var yData = yScale.ticks(yTicks);
                var yLines = yLineDataJoin(this, yData);

                yLines.attr({
                    'x1': xScale.range()[0],
                    'x2': xScale.range()[1],
                    'y1': yScale,
                    'y2': yScale
                });

                yDecorate(yLines, yData, index);

            });
        };

        gridlines.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return gridlines;
        };
        gridlines.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return gridlines;
        };
        gridlines.xTicks = function(x) {
            if (!arguments.length) {
                return xTicks;
            }
            xTicks = x;
            return gridlines;
        };
        gridlines.yTicks = function(x) {
            if (!arguments.length) {
                return yTicks;
            }
            yTicks = x;
            return gridlines;
        };
        gridlines.yDecorate = function(x) {
            if (!arguments.length) {
                return yDecorate;
            }
            yDecorate = x;
            return gridlines;
        };
        gridlines.xDecorate = function(x) {
            if (!arguments.length) {
                return xDecorate;
            }
            xDecorate = x;
            return gridlines;
        };

        rebind(gridlines, xLineDataJoin, {'xKey': 'key'});
        rebind(gridlines, yLineDataJoin, {'yKey': 'key'});

        return gridlines;
    }

    function band() {

        var xScale = d3.time.scale(),
            yScale = d3.scale.linear(),
            x0, x1, y0, y1,
            x0Scaled = function() {
                return range(xScale)[0];
            },
            x1Scaled = function() {
                return range(xScale)[1];
            },
            y0Scaled = function() {
                return range(yScale)[0];
            },
            y1Scaled = function() {
                return range(yScale)[1];
            },
            decorate = noop;

        var dataJoin = dataJoinUtil()
            .selector('g.annotation')
            .element('g')
            .attr('class', 'annotation');

        var band = function(selection) {
            selection.each(function(data, index) {

                var container = d3.select(this);

                var g = dataJoin(container, data);

                g.enter()
                    .append('path')
                    .classed('band', true);

                var pathGenerator = bar()
                    .horizontalAlign('right')
                    .verticalAlign('top')
                    .x(x0Scaled)
                    .y(y0Scaled)
                    .height(function() {
                        return y1Scaled.apply(this, arguments) - y0Scaled.apply(this, arguments);
                    })
                    .width(function() {
                        return x1Scaled.apply(this, arguments) - x0Scaled.apply(this, arguments);
                    });

                g.select('path')
                    .attr('d', function(d, i) {
                        // the path generator is being used to render a single path, hence
                        // an explicit index is provided
                        return pathGenerator.call(this, [d], i);
                    });

                decorate(g, data, index);
            });
        };

        band.xScale = function(x) {
            if (!arguments.length) {
                return xScale;
            }
            xScale = x;
            return band;
        };
        band.yScale = function(x) {
            if (!arguments.length) {
                return yScale;
            }
            yScale = x;
            return band;
        };
        band.decorate = function(x) {
            if (!arguments.length) {
                return decorate;
            }
            decorate = x;
            return band;
        };
        band.x0 = function(x) {
            if (!arguments.length) {
                return x0;
            }
            x0 = d3.functor(x);
            x0Scaled = function() {
                return xScale(x0.apply(this, arguments));
            };
            return band;
        };
        band.x1 = function(x) {
            if (!arguments.length) {
                return x1;
            }
            x1 = d3.functor(x);
            x1Scaled = function() {
                return xScale(x1.apply(this, arguments));
            };
            return band;
        };
        band.y0 = function(x) {
            if (!arguments.length) {
                return y0;
            }
            y0 = d3.functor(x);
            y0Scaled = function() {
                return yScale(y0.apply(this, arguments));
            };
            return band;
        };
        band.y1 = function(x) {
            if (!arguments.length) {
                return y1;
            }
            y1 = d3.functor(x);
            y1Scaled = function() {
                return yScale(y1.apply(this, arguments));
            };
            return band;
        };
        return band;
    }

    var annotation = {
        band: band,
        gridline: gridline,
        line: line
    };

    // Needs to be defined like this so that the grunt task can update it
    var version = '5.1.0';

    var fc = {
        annotation: annotation,
        chart: chart,
        data: _data,
        indicator: _indicator,
        scale: __scale,
        series: _series,
        svg: svg,
        tool: tool,
        util: util,
        version: version,
        layout: _layout
    };

    return fc;

}));
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});
//# sourceMappingURL=jquery.min.map
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.6",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a(f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.6",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")?(c.prop("checked")&&(a=!1),b.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==c.prop("type")&&(c.prop("checked")!==this.$element.hasClass("active")&&(a=!1),this.$element.toggleClass("active")),c.prop("checked",this.$element.hasClass("active")),a&&c.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),a(c.target).is('input[type="radio"]')||a(c.target).is('input[type="checkbox"]')||c.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.6",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));return a>this.$items.length-1||0>a?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.6",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function c(c){c&&3===c.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=b(d),f={relatedTarget:this};e.hasClass("open")&&(c&&"click"==c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(e[0],c.target)||(e.trigger(c=a.Event("hide.bs.dropdown",f)),c.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",f)))))}))}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.6",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=b(e),g=f.hasClass("open");if(c(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",c);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger(a.Event("shown.bs.dropdown",h))}return!1}},g.prototype.keydown=function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)){var d=a(this);if(c.preventDefault(),c.stopPropagation(),!d.is(".disabled, :disabled")){var e=b(d),g=e.hasClass("open");if(!g&&27!=c.which||g&&27==c.which)return 27==c.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find(".dropdown-menu"+h);if(i.length){var j=i.index(c.target);38==c.which&&j>0&&j--,40==c.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",c).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.6",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in"),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+e).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",a,b)};c.VERSION="3.3.6",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(a.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusin"==b.type?"focus":"hover"]=!0),c.tip().hasClass("in")||"in"==c.hoverState?void(c.hoverState="in"):(clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.isInStateTrue=function(){for(var a in this.inState)if(this.inState[a])return!0;return!1},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusout"==b.type?"focus":"hover"]=!1),c.isInStateTrue()?void 0:(clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide())},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.getPosition(this.$viewport);h="bottom"==h&&k.bottom+m>o.bottom?"top":"top"==h&&k.top-m<o.top?"bottom":"right"==h&&k.right+l>o.width?"left":"left"==h&&k.left-l<o.left?"right":h,f.removeClass(n).addClass(h)}var p=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(p,h);var q=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",q).emulateTransitionEnd(c.TRANSITION_DURATION):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top+=g,b.left+=h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);return this.$element.trigger(g),g.isDefaultPrevented()?void 0:(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=d?{top:0,left:0}:b.offset(),g={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},h=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,g,h,f)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.right&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){if(!this.$tip&&(this.$tip=a(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),b?(c.inState.click=!c.inState.click,c.isInStateTrue()?c.enter(c):c.leave(c)):c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type),a.$tip&&a.$tip.detach(),a.$tip=null,a.$arrow=null,a.$viewport=null})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.6",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.6",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");
d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.6",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.6",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return c>e?"top":!1;if("bottom"==this.affixed)return null!=c?e+this.unpin<=f.top?!1:"bottom":a-d>=e+g?!1:"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&c>=e?"top":null!=d&&i+j>=a-d?"bottom":!1},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=Math.max(a(document).height(),a(document.body).height());"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
!function(){"use strict";
// Crazyness to get a strict mode compliant reference to the global object
var a=null;a=(1,eval)("this"),a.sc={behavior:{},chart:{secondary:{}},data:{feed:{coinbase:{}}},menu:{data:{},generator:{},primary:{},secondary:{}},model:{menu:{}},series:{},util:{domain:{}}}}(),function(a,b,c){"use strict";c.event={crosshairChange:"crosshairChange",viewChange:"viewChange",messageReceived:"messageReceived",dataLoaded:"dataLoaded",dataProductChange:"dataProductChange",dataPeriodChange:"dataPeriodChange",resetToLatest:"resetToLatest",primaryChartSeriesChange:"primaryChartSeriesChange",primaryChartYValueAccessorChange:"primaryChartYValueAccessorChange",primaryChartIndicatorChange:"primaryChartIndicatorChange",secondaryChartChange:"secondaryChartChange"}}(d3,fc,sc),function(a,b,c){"use strict";c.model.headMenu=function(a,b,c){return{productConfig:{title:null,careted:!0,listIcons:!1,icon:!1},products:a,selectedProduct:b,selectedPeriod:c}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.legend=function(a,b){return{data:void 0,product:a,period:b}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.menu.indicatorOptions=function(){var a=b.series.line().decorate(function(a){a.enter().classed("movingAverage",!0)}).yValue(function(a){return a.movingAverage});return[c.menu.option("Moving Average","movingAverage",a,"sc-icon-moving-average-indicator"),c.menu.option("Bollinger Bands","bollinger",b.indicator.renderer.bollingerBands(),"sc-icon-bollinger-bands-indicator")]}}(d3,fc,sc),function(a,b,c){"use strict";c.model.menu.indicatorSelector=function(){return{config:{title:"Add Indicator",careted:!1,listIcons:!0,icon:!1},indicatorOptions:c.model.menu.indicatorOptions(),secondaryChartOptions:c.model.menu.secondaryChartOptions()}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.menu.secondaryChartOptions=function(){return[c.menu.option("Relative Strength Index","secondary-rsi",c.chart.secondary.rsi(),"sc-icon-rsi-indicator"),c.menu.option("MACD","secondary-macd",c.chart.secondary.macd(),"sc-icon-macd-indicator"),c.menu.option("Volume","secondary-volume",c.chart.secondary.volume(),"sc-icon-bar-series")]}}(d3,fc,sc),function(a,b,c){"use strict";c.model.menu.selectors=function(){
// TODO: Instantiate series/indicator components outside of menu model?
return{seriesSelector:c.model.menu.seriesSelector(),indicatorSelector:c.model.menu.indicatorSelector()}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.menu.seriesSelector=function(){
// TODO: Could 'isLine' go on primary chart series model instead?
var a=b.series.line();a.isLine=!0;var d=c.menu.option("Candlestick","candlestick",c.series.candlestick(),"sc-icon-candlestick-series");return d.isSelected=!0,{config:{title:null,careted:!1,listIcons:!0,icon:!0},options:[d,c.menu.option("OHLC","ohlc",b.series.ohlc(),"sc-icon-ohlc-series"),c.menu.option("Line","line",a,"sc-icon-line-series"),c.menu.option("Point","point",b.series.point(),"sc-icon-point-series"),c.menu.option("Area","area",b.series.area(),"sc-icon-area-series")]}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.menu.yValueAccessorOptions=function(){var a=c.menu.option("Close","close",function(a){return a.close});return a.isSelected=!0,[c.menu.option("Open","open",function(a){return a.open}),c.menu.option("High","high",function(a){return a.high}),c.menu.option("Low","low",function(a){return a.low}),a]}}(d3,fc,sc),function(a,b,c){"use strict";c.model.nav=function(){return{data:[],viewDomain:[],trackingLatest:!0}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.navigationReset=function(){return{trackingLatest:!0}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.period=function(b){return b=b||{},{display:b.display||"1 day",seconds:b.seconds||86400,d3TimeInterval:b.d3TimeInterval||{unit:a.time.day,value:1},timeFormat:a.time.format(b.timeFormat||"%b %d")}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.primaryChart=function(a){var b={data:[],trackingLatest:!0,viewDomain:[],selectorsChanged:!0},d=a;Object.defineProperty(b,"product",{get:function(){return d},set:function(a){d=a,b.selectorsChanged=!0}});var e=c.menu.option("Candlestick","candlestick",c.series.candlestick());Object.defineProperty(b,"series",{get:function(){return e},set:function(a){e=a,b.selectorsChanged=!0}});var f={option:function(a){return a.close}};Object.defineProperty(b,"yValueAccessor",{get:function(){return f},set:function(a){f=a,b.selectorsChanged=!0}});var g=[];return Object.defineProperty(b,"indicators",{get:function(){return g},set:function(a){g=a,b.selectorsChanged=!0}}),b}}(d3,fc,sc),function(a,b,c){"use strict";c.model.product=function(b){return{display:b.display||"Unspecified Product",priceFormat:a.format(b.priceFormat||".2f"),volumeFormat:a.format(b.volumeFormat||"s"),periods:b.periods||[]}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.secondaryChart=function(a){return{data:[],viewDomain:[],trackingLatest:!0,product:a}}}(d3,fc,sc),function(a,b,c){"use strict";c.model.xAxis=function(a){return{viewDomain:[],period:a}}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.legend=function(){function b(b){b.each(function(b){var h=a.select(this);if(c=b.product.priceFormat,d=b.product.volumeFormat,e=b.period.timeFormat,null==b.data||b.data!==f){f=b.data;var i=h.selectAll("span").data(g);i.enter().append("span").attr("class",function(a,b){return b%2===0?"legendLabel":"legendValue"}),i.text(function(a,c){return c%2===0?a:b.data?a(b.data):""})}})}var c,d,e,f,g=["T",function(a){return e(a.date)},"O",function(a){return c(a.open)},"H",function(a){return c(a.high)},"L",function(a){return c(a.low)},"C",function(a){return c(a.close)},"V",function(a){return d(a.volume)}];return b}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.nav=function(){function d(a){var d=a.datum();s.domain(d.viewDomain);var h=c.util.domain.filterDataInDateRange(b.util.extent().fields("date")(d.data),d.data),i=b.util.extent().fields(["low","high"])(h);r.xDomain(b.util.extent().fields("date")(d.data)).yDomain(i),v.on("brush",function(){var b=f(v);
// Hide the bar if the extent is empty
e(a,b),b||q[c.event.viewChange]([v.extent()[0][0],v.extent()[1][0]])}).on("brushend",function(){var b=f(v);e(a,!1),b&&q[c.event.viewChange](c.util.domain.centerOnDate(s.domain(),d.data,v.extent()[0][0]))}),r.plotArea(w),a.call(r);
// Allow to zoom using mouse, but disable panning
var j=c.behavior.zoom(g).scale(s).trackingLatest(d.trackingLatest).allowPan(!1).on("zoom",function(a){q[c.event.viewChange](a)});a.select(".plot-area").call(j)}function e(a,b){a.select(".plot-area").selectAll(".e, .w").classed("hidden",b)}function f(a){return a.extent()[0][0]-a.extent()[1][0]===0}var g,h=100,i=40,j=h-i,k=2,l=k/2,m=j-l,n=m,o=l+n/2,p=2,q=a.dispatch(c.event.viewChange),r=b.chart.cartesian(b.scale.dateTime(),a.scale.linear()).yTicks(0).margin({bottom:i}),s=b.scale.dateTime(),t=b.series.area().yValue(function(a){return a.close}),u=b.series.line().yValue(function(a){return a.close}),v=a.svg.brush(),w=b.series.multi().series([t,u,v]).decorate(function(a){var b=a.enter();a.select(".extent").attr("height",m).attr("y",k/2),
// overload d3 styling for the brush handles
// as Firefox does not react properly to setting these through less file.
b.selectAll(".resize.w>rect, .resize.e>rect").attr("width",p).attr("x",-p/2),a.selectAll(".resize.w>rect, .resize.e>rect").attr("height",n).attr("y",l);
// Adds the handles to the brush sides
var c=b.selectAll(".e, .w");c.append("circle").attr("cy",o).attr("r",7).attr("class","outer-handle"),c.append("circle").attr("cy",o).attr("r",4).attr("class","inner-handle")}).mapping(function(a){return a!==v?this.data:void v.extent([[s.domain()[0],r.yDomain()[0]],[s.domain()[1],r.yDomain()[1]]])});return a.rebind(d,q,"on"),d.dimensionChanged=function(a){g=parseInt(a.style("width")),s.range([0,g])},d}}(d3,fc,sc),function(a,b,c){"use strict";function d(a,b){var c=b/2;return[[0,0],[c,-c],[a,-c],[a,c],[c,c],[0,0]]}function e(a,b){for(var c=a.ticks.apply(a,[]),d=a.domain(),e=0;e<b.length;e++)b[e]>d[0]&&b[e]<d[1]&&c.push(b[e]);return c}function f(c,d,e){var f;switch(d.valueString){case"candlestick":case"ohlc":f=[d.option.yLowValue(),d.option.yHighValue()];break;case"line":case"point":f=d.option.yValue();break;case"area":f=d.option.y1Value();break;default:throw new Error("Main series given to chart does not have expected interface")}var g=b.util.extent().fields(f)(c);if(e.length){var h=e.map(function(a){return a.valueString}),i=-1!==h.indexOf("movingAverage"),j=-1!==h.indexOf("bollinger");if(j){var k=c.map(function(a){return a.bollingerBands}),l=b.util.extent().fields(["lower","upper"])(k);g[0]=a.min([l[0],g[0]]),g[1]=a.max([l[1],g[1]])}if(i){var m=b.util.extent().fields("movingAverage")(c);g[0]=a.min([m[0],g[0]]),g[1]=a.max([m[1],g[1]])}if(!i&&!j)throw new Error("Unexpected indicator type")}return g}c.chart.primary=function(){function g(a){var b=[u,p.option,v],c=r.map(function(a){return a.option});a(b.concat(c)),
// add crosshair last to have it on top
a(a().concat(t))}function h(){switch(A.value(q),B.value(q),v.value(q),p.valueString){case"line":case"point":case"area":p.option.yValue(q)}}function i(a){var b=p.option.width(a);t.decorate(function(a){a.classed("band",!0),a.selectAll(".vertical > line").style("stroke-width",b)})}function j(a){a.classed("band",!1).selectAll("line").style("stroke-width",null)}function k(a){"candlestick"===p.valueString||"ohlc"===p.valueString?i(a):t.decorate(j)}function l(g){var h=g.datum();h.selectorsChanged&&C(h),z.xDomain(h.viewDomain),t.snap(b.util.seriesPointSnapXOnly(p.option,h.data)),k(h.data),A(h.data),B(h.data);
// Scale y axis
var i=c.util.domain.filterDataInDateRange(z.xDomain(),h.data),j=f(i,p,r),l=c.util.domain.padYDomain(j,.04);z.yDomain(l);
// Find current tick values and add close price to this list, then set it explicitly below
var s=q(h.data[h.data.length-1]),u=e(y,[s]);z.yTickValues(u).yDecorate(function(b){b.selectAll(".tick").filter(function(a){return a===s}).classed("closeLine",!0).select("path").attr("d",function(b){return a.svg.area()(d(n,14))})}),
// Redraw
z.plotArea(w),g.call(z);var v=c.behavior.zoom(m).scale(x).trackingLatest(h.trackingLatest).on("zoom",function(a){o[c.event.viewChange](a)});g.select(".plot-area").call(v)}var m,n=60,o=a.dispatch(c.event.viewChange,c.event.crosshairChange),p=c.menu.option("Candlestick","candlestick",c.series.candlestick()),q=function(a){return a.close},r=[],s=[],t=b.tool.crosshair().xLabel("").yLabel("").on("trackingmove",function(a){a.length>0?o.crosshairChange(a[0].datum):o.crosshairChange(void 0)}).on("trackingend",function(){o.crosshairChange(void 0)}),u=b.annotation.gridline().yTicks(5).xTicks(0),v=b.annotation.line().orient("horizontal").value(q).label(""),w=b.series.multi().key(function(a,b){return a.isLine?b:a}).series([u,p.option,v,t]).mapping(function(a){switch(a){case v:return[this.data[this.data.length-1]];case t:return s;default:return this.data}}),x=b.scale.dateTime(),y=a.scale.linear(),z=b.chart.cartesian(x,y).xTicks(0).yOrient("right").margin({top:0,left:0,bottom:0,right:n}),A=b.indicator.algorithm.movingAverage(),B=b.indicator.algorithm.bollingerBands(),C=function(a){p=a.series,q=a.yValueAccessor.option,r=a.indicators,h(),g(w.series),z.yTickFormat(a.product.priceFormat),a.selectorsChanged=!1};
// Call when the main layout is modified
return a.rebind(l,o,"on"),l.dimensionChanged=function(a){m=parseInt(a.style("width"))-n},l}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.secondary.base=function(){function d(b){b.each(function(d){var h=a.select(this).call(l),j=c.behavior.zoom(e).scale(g).trackingLatest(i).on("zoom",function(a){f[c.event.viewChange](a)});h.select(".plot-area-container").datum({data:b.datum()}).call(j)})}var e,f=a.dispatch(c.event.viewChange),g=b.scale.dateTime(),h=a.scale.linear(),i=!0,j=60,k=b.series.multi(),l=b.chart.cartesian(g,h).plotArea(k).xTicks(0).yOrient("right").margin({top:0,left:0,bottom:0,right:j});return d.trackingLatest=function(a){return arguments.length?(i=a,d):i},a.rebind(d,f,"on"),a.rebind(d,k,"series","mapping","decorate"),a.rebind(d,l,"yTickValues","yTickFormat","yTicks","xDomain","yDomain"),d.dimensionChanged=function(a){e=parseInt(a.style("width"))-j},d}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.secondary.macd=function(){function d(b){var d=b.datum();h(d.data);var e=a.max(d.data,function(a){return Math.abs(a.macd.macd)}),f=c.util.domain.padYDomain([-e,e],.04);i.trackingLatest(d.trackingLatest).xDomain(d.viewDomain).yDomain(f),b.datum(d.data).call(i)}var e=a.dispatch(c.event.viewChange),f=b.annotation.line().value(0).label(""),g=b.indicator.renderer.macd(),h=b.indicator.algorithm.macd(),i=c.chart.secondary.base().series([f,g]).yTicks(5).mapping(function(a){return a===f?[0]:this}).decorate(function(a){a.enter().attr("class",function(a,b){return["multi zero","multi"][b]})}).on(c.event.viewChange,function(a){e[c.event.viewChange](a)});return a.rebind(d,e,"on"),d.dimensionChanged=function(a){i.dimensionChanged(a)},d}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.secondary.rsi=function(){function d(a){var b=a.datum();g(b.data),i.trackingLatest(b.trackingLatest).xDomain(b.viewDomain).yDomain([0,100]),a.datum(b.data).call(i)}var e=a.dispatch(c.event.viewChange),f=b.indicator.renderer.relativeStrengthIndex(),g=b.indicator.algorithm.relativeStrengthIndex(),h=[f.lowerValue(),50,f.upperValue()],i=c.chart.secondary.base().series([f]).yTickValues(h).on(c.event.viewChange,function(a){e[c.event.viewChange](a)});return a.rebind(d,e,"on"),d.dimensionChanged=function(a){i.dimensionChanged(a)},d}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.secondary.volume=function(){function d(b){b.each(function(d){var e=a.max(d.data,function(b){return a.max([b.volume])}),f=a.min(d.data,function(b){return a.min([b.volume])}),h=c.util.domain.padYDomain([f,e],.04);g.yTickFormat(d.product.volumeFormat).trackingLatest(d.trackingLatest).xDomain(d.viewDomain).yDomain(h),b.datum(d.data).call(g)})}var e=a.dispatch(c.event.viewChange),f=b.series.bar().yValue(function(a){return a.volume}),g=c.chart.secondary.base().series([f]).yTicks(4).on(c.event.viewChange,function(a){e[c.event.viewChange](a)});return a.rebind(d,e,"on"),d.dimensionChanged=function(a){g.dimensionChanged(a)},d}}(d3,fc,sc),function(a,b,c){"use strict";c.chart.xAxis=function(){function c(a){var b=(e.ticks()[1]-e.ticks()[0])/1e3;b<a.seconds?f.ticks(a.d3TimeInterval.unit,a.d3TimeInterval.value):f.ticks(6)}function d(a){var b=a.datum();e.domain(b.viewDomain),c(b.period),a.call(f)}var e=b.scale.dateTime(),f=a.svg.axis().scale(e).orient("bottom");return d.dimensionChanged=function(a){e.range([0,parseInt(a.style("width"))])},d}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.generator.buttonGroup=function(){function c(b){b.each(function(b){var c=a.select(this);e(c,b.options).classed("active",function(a){return a.isSelected}).classed("btn btn-primary",!0).text(function(a){return a.displayString}).on("click",d.optionChange)})}var d=a.dispatch("optionChange"),e=b.util.dataJoin().selector(".button").element("label").attr("class","button");return a.rebind(c,d,"on"),c}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.generator.dropdown=function(){function c(a){var b=a.datum(),c=b.selectedIndex||0,i=b.config,j=e(a,[b.options]);if(i.icon){var k=j.selectAll(".icon").data([0]);k.enter().append("span"),k.attr("class","icon "+b.options[c].icon)}else j.select(".icon").remove(),j.text(function(){return i.title||b.options[c].displayString});f(j,i.careted?[0]:[]);var l=g(a,[b.options]),m=h(l,b.options),n=m.enter().on("click",d.optionChange).append("a").attr("href","#");n.append("span").attr("class","icon"),n.append("span").attr("class","name"),m.selectAll(".icon").attr("class",function(a){return"icon "+a.icon}),m.selectAll(".name").text(function(a){return a.displayString})}var d=a.dispatch("optionChange"),e=b.util.dataJoin().selector("button").element("button").attr({"class":"dropdown-toggle",type:"button","data-toggle":"dropdown"}),f=b.util.dataJoin().selector(".caret").element("span").attr("class","caret"),g=b.util.dataJoin().selector("ul").element("ul").attr("class","dropdown-menu"),h=b.util.dataJoin().selector("li").element("li");return a.rebind(c,d,"on"),c}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.generator.tabGroup=function(){function c(a){var c=a.datum().selectedIndex||0,f=e(a,[a.datum().options]);f.enter().append("ul");var g=f.selectAll("li").data(b.util.fn.identity);g.enter().append("li").append("a").attr("href","#").on("click",d.tabClick),g.classed("active",function(a,b){return b===c}).select("a").text(function(a){return a.displayString})}var d=a.dispatch("tabClick"),e=b.util.dataJoin().selector("ul").element("ul");return a.rebind(c,d,"on"),c}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.head=function(){var b=a.dispatch(c.event.dataProductChange,c.event.dataPeriodChange),d=c.menu.generator.dropdown().on("optionChange",function(a){b[c.event.dataProductChange](a)}),e=c.menu.generator.tabGroup().on("tabClick",function(a){b[c.event.dataPeriodChange](a)}),f=function(b){b.each(function(b){var f=a.select(this),g=b.products;f.select("#product-dropdown").datum({config:b.productConfig,options:g.map(c.menu.productAdaptor),selectedIndex:g.indexOf(b.selectedProduct)}).call(d);var h=b.selectedProduct.periods;f.select("#period-selector").classed("hidden",h.length<=1).datum({options:h.map(c.menu.periodAdaptor),selectedIndex:h.indexOf(b.selectedPeriod)}).call(e)})};return a.rebind(f,b,"on")}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.navigationReset=function(){function b(a){var b=a.datum(),e=a.selectAll("g").data([b]);e.enter().append("g").attr("class","reset-button").on("click",function(){d[c.event.resetToLatest]()}).append("path").attr("d","M1.5 1.5h13.438L23 20.218 14.937 38H1.5l9.406-17.782L1.5 1.5z"),e.classed("active",!b.trackingLatest)}var d=a.dispatch(c.event.resetToLatest);return a.rebind(b,d,"on"),b}}(d3,fc,sc),function(a,b,c){"use strict";
// TODO: Move to /model
c.menu.option=function(a,b,c,d){return{icon:d||null,displayString:a,// TODO: is 'displayName' better?
valueString:b,// TODO: is this an id?
option:c,// TODO: Ideally, remove.
isSelected:!1}},/**
     * Generates a menu option similar to those generated by sc.menu.option from a sc.model.product object
     *
     * @param {product} product - The product used to generate a menu option
     */
c.menu.productAdaptor=function(a){return{displayString:a.display,option:a}},/**
     * Generates a menu option similar to those generated by sc.menu.option from a sc.model.period object
     *
     * @param {period} period - The period used to generate a menu option
     */
c.menu.periodAdaptor=function(a){return{displayString:a.display,option:a}}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.selectors=function(){var b=a.dispatch(c.event.primaryChartSeriesChange,c.event.primaryChartIndicatorChange,c.event.secondaryChartChange),d=c.menu.generator.dropdown().on("optionChange",b[c.event.primaryChartSeriesChange]),e=c.menu.generator.dropdown().on("optionChange",function(a){0===a.valueString.indexOf("secondary")?b[c.event.secondaryChartChange](a):b[c.event.primaryChartIndicatorChange](a)}),f=function(b){b.each(function(b){var c=a.select(this),f=b.seriesSelector.options.map(function(a){return a.isSelected}).indexOf(!0);c.select("#series-dropdown").datum({config:b.seriesSelector.config,options:b.seriesSelector.options,selectedIndex:f}).call(d);var g=b.indicatorSelector.indicatorOptions.concat(b.indicatorSelector.secondaryChartOptions),h=g.map(function(a,b){return a.isSelected?b:null}).filter(function(a){return a});c.select("#indicator-dropdown").datum({config:b.indicatorSelector.config,options:g,selected:h}).call(e)})};return a.rebind(f,b,"on")}}(d3,fc,sc),function(a,b,c){"use strict";c.menu.side=function(){var b=a.dispatch(c.event.primaryChartSeriesChange,c.event.primaryChartYValueAccessorChange,c.event.primaryChartIndicatorChange,c.event.secondaryChartChange),d=c.menu.generator.buttonGroup().on("optionChange",b[c.event.primaryChartSeriesChange]),e=c.menu.generator.buttonGroup().on("optionChange",b[c.event.primaryChartYValueAccessorChange]),f=c.menu.generator.buttonGroup().on("optionChange",b[c.event.primaryChartIndicatorChange]),g=c.menu.generator.buttonGroup().on("optionChange",b[c.event.secondaryChartChange]),h=function(b){b.each(function(b){var c=a.select(this);c.select(".series-buttons").datum({options:b.seriesOptions}).call(d),c.select(".y-value-accessor-buttons").datum({options:b.yValueAccessorOptions}).call(e),c.select(".indicator-buttons").datum({options:b.indicatorOptions}).call(f),c.select(".secondary-chart-buttons").datum({options:b.secondaryChartOptions}).call(g)})};return a.rebind(h,b,"on")}}(d3,fc,sc),function(a,b,c){"use strict";c.util.domain.centerOnDate=function(c,d,e){var f=b.util.extent().fields("date")(d),g=c.map(function(a){return a.getTime()}),h=(a.max(g)-a.min(g))/1e3;if(e.getTime()<f[0]||e.getTime()>f[1])return[new Date(a.min(g)),new Date(a.max(g))];var i=[a.time.second.offset(e,-h/2),a.time.second.offset(e,h/2)],j=0;return i[1].getTime()>f[1].getTime()?j=(f[1].getTime()-i[1].getTime())/1e3:i[0].getTime()<f[0].getTime()&&(j=(f[0].getTime()-i[0].getTime())/1e3),[a.time.second.offset(i[0],j),a.time.second.offset(i[1],j)]}}(d3,fc,sc),function(a,b,c){"use strict";c.util.domain.filterDataInDateRange=function(b,c){var d=a.min(b,function(a){return a.getTime()}),e=a.max(b,function(a){return a.getTime()}),f=c.sort(function(a,b){return a.date-b.date}),g=a.bisector(function(a){return a.date}),h=c.slice(
// Pad and clamp the bisector values to ensure extents can be calculated
Math.max(0,g.left(f,d)-1),Math.min(g.right(f,e)+1,f.length));return h}}(d3,fc,sc),function(a,b,c){"use strict";c.util.domain.moveToLatest=function(c,d,e){arguments.length<3&&(e=1);var f=b.util.extent().fields("date")(d),g=(f[1].getTime()-f[0].getTime())/1e3,h=c.map(function(a){return a.getTime()}),i=e*(a.max(h)-a.min(h))/1e3,j=g>i?[a.time.second.offset(f[1],-i),f[1]]:f;return j}}(d3,fc,sc),function(a,b,c){"use strict";c.util.domain.padYDomain=function(a,b){var c=Array.isArray(b)?b:[b,b],d=a[1]-a[0];return[a[0]-d*c[0],a[1]+d*c[1]]}}(d3,fc,sc),function(a,b,c){"use strict";c.util.domain.trackingLatestData=function(b,c){var d=a.max(b,function(a){return a.getTime()}),e=a.max(c,function(a){return a.date.getTime()});return d===e}}(d3,fc,sc),function(a,b,c){"use strict";var d=!1;c.util.layout=function(a,b){function c(b){return a.secondaries.filter(function(a,b){return b===i})}for(var e=0,f=0;f<b.secondaries.length;f++)b.secondaries[f]&&e++;a.secondaries.filter(function(a,b){return e>b}).style("flex","1"),a.secondaries.filter(function(a,b){return b>=e}).style("flex","0");var g=parseInt(a.app.select(".head-row").style("height"),10);d||(g+=parseInt(a.app.select(".head-row").style("padding-top"),10)+parseInt(a.app.select(".head-row").style("padding-bottom"),10)+parseInt(a.app.select(".head-row").style("margin-bottom"),10),d=!0);var h=window.innerHeight-g;a.charts.style("height",h+"px"),b.xAxis.dimensionChanged(a.xAxis),b.navbar.dimensionChanged(a.navbar),b.primary.dimensionChanged(a.primary);for(var i=0;i<b.secondaries.length;i++)b.secondaries[i].option.dimensionChanged(c(i))}}(d3,fc,sc),function(a,b,c){"use strict";c.data.callbackInvalidator=function(){function a(a){var c=++b;return function(d,e){b>c||a(d,e)}}var b=0;return a.invalidateCallback=function(){return b++,a},a}}(d3,fc,sc),function(a,b,c){"use strict";c.data.dataInterface=function(){function d(b){var c=new Date,d=a.time.second.offset(c,-m*b);h.start(d).end(c)}function e(a,b){b[b.length-1].date.getTime()!==a.date.getTime()?b.push(a):b[b.length-1]=a}function f(a){return function(b,d){"message"===b.type&&d&&e(d,a),l[c.event.messageReceived](b,a)}}function g(a){g.invalidate(),h.granularity(a),j.period(a),d(a);var b=[];h(i(function(a,d){a||(b=d.reverse(),j(f(b),b[b.length-1])),l[c.event.dataLoaded](a,b)}))}var h=b.data.feed.coinbase(),i=c.data.callbackInvalidator(),j=c.data.feed.coinbase.ohlcWebSocketAdaptor(),k=b.data.random.financial(),l=a.dispatch(c.event.messageReceived,c.event.dataLoaded),m=200;return g.generateDailyData=function(){g.invalidate();var a=new Date;a.setHours(0,0,0,0);var b=864e5;k.startDate(new Date(a-(m-1)*b));var d=k(m);l[c.event.dataLoaded](null,d)},g.invalidate=function(){return j.close(),i.invalidateCallback(),g},a.rebind(g,l,"on"),g}}(d3,fc,sc),function(a,b,c){"use strict";c.data.feed.coinbase.ohlcWebSocketAdaptor=function(){function b(a,b){return{date:b,open:a.price,close:a.price,low:a.price,high:a.price,volume:a.volume}}function d(a,c){null==a&&(a=b(c,c.date));var d=c.date.getTime(),e=a.date.getTime(),g=1e3*f;if(d>e+g){var h=(d-e)%g,i=d-h;a=b(c,new Date(i))}else
// Update current basket
a.high=Math.max(a.high,c.price),a.low=Math.min(a.low,c.price),a.volume+=c.volume,a.close=c.price;return a}function e(a,b){var c=b;g(function(b,e){e&&(c=d(c,e)),a(b,c)})}
// Expects transactions with a price, volume and date and organizes them into candles of given periods
// Re-call OHLC whenever you want to start collecting for a new period/product
// In seconds
var f=86400,g=c.data.feed.coinbase.webSocket();return e.period=function(a){return arguments.length?(f=a,e):f},a.rebind(e,g,"product","messageType","close"),e}}(d3,fc,sc),function(a,b,c){"use strict";c.data.feed.coinbase.webSocket=function(){function a(e){a.close(),d=new WebSocket("wss://ws-feed.exchange.coinbase.com");var f={type:"subscribe",product_id:b};d.onopen=function(a){d.send(JSON.stringify(f)),e(a,null)},d.onmessage=function(a){var b=JSON.parse(a.data);if(b.type===c){var d={};d.date=new Date(b.time),d.price=parseFloat(b.price),d.volume=parseFloat(b.size),e(a,d)}},d.onerror=function(a){e(a,null)},d.onclose=function(a){e(a,null)}}var b="BTC-USD",c="match",d=null;return a.close=function(){return d&&d.close(),a},a.messageType=function(b){return arguments.length?(c=b,a):c},a.product=function(c){return arguments.length?(b=c,a):b},a}}(d3,fc,sc),function(a,b,c){"use strict";c.behavior.zoom=function(d){function e(a){
// Don't pan off sides
// Don't pan off sides
return a[0]>=0?-a[0]:a[1]<=0?-a[1]:0}function f(a){
// If zooming, and about to pan off screen, do nothing
return a[0]>0&&a[1]<0}function g(a){var b=l.translate()[0];b+=a,l.translate([b,0])}function h(){l.translate([0,0]),l.scale(1)}function i(a){var i=b.util.extent().fields("date")(a.datum().data);l.x(j).on("zoom",function(){var b=j(i[0]),p=j(i[1]),q=f([b,p-d]),r=e([b,p-d]);g(r);var s=1===l.scale(),t=1!==l.scale();if(s&&m||t&&n){var u=j.domain();q?u=i:t&&o&&(u=c.util.domain.moveToLatest(u,a.datum().data)),u[0].getTime()!==u[1].getTime()?k.zoom(u):
// Ensure the user can't zoom-in infinitely, causing the chart to fail to render
// #168, #411
h()}else h()}),a.call(l)}var j,k=a.dispatch("zoom"),l=a.behavior.zoom(),m=!0,n=!0,o=!0;return i.allowPan=function(a){return arguments.length?(m=a,i):m},i.allowZoom=function(a){return arguments.length?(n=a,i):n},i.trackingLatest=function(a){return arguments.length?(o=a,i):o},i.scale=function(a){return arguments.length?(j=a,i):j},a.rebind(i,k,"on"),i}}(d3,fc,sc),function(a,b,c){"use strict";/* Credit to Chris Price for this optimisation
    http://blog.scottlogic.com/2015/08/06/an-adventure-in-svg-filter-land.html
    */
c.series.candlestick=function(){var c=b.scale.dateTime(),d=a.scale.linear(),e=b.util.fractionalBarWidth(.75),f=function(a,b){return a.date},g=function(a,b){return c(f(a,b))},h=function(a){return a.low},i=function(a){return a.high},j=function(a,b){return a.close},k=b.svg.candlestick().x(function(a){return c(a.date)}).open(function(a){return d(a.open)}).high(function(a){return d(i(a))}).low(function(a){return d(h(a))}).close(function(a){return d(a.close)}),l=b.util.dataJoin().selector("path.up").element("path").attr("class","up"),m=b.util.dataJoin().selector("path.down").element("path").attr("class","down"),n=function(a){a.each(function(a){k.width(e(a.map(g)));var b=a.filter(function(a){return a.open<a.close}),c=a.filter(function(a){return a.open>=a.close});l(this,[b]).attr("d",k),m(this,[c]).attr("d",k)})};return n.xScale=function(a){return arguments.length?(c=a,n):c},n.yScale=function(a){return arguments.length?(d=a,n):d},n.xValue=function(a){return arguments.length?(f=a,n):f},n.yLowValue=function(a){return arguments.length?(h=a,n):h},n.yHighValue=function(a){return arguments.length?(i=a,n):i},n.yCloseValue=function(a){return arguments.length?(j=a,n):j},n.width=function(a){return e(a.map(g))},n}}(d3,fc,sc),function(a,b,c){"use strict";c.app=function(){function d(){R&&A.suspendLayout(!1),A.primary.datum(H).call(P.primary),A.legend.datum(O).call(P.legend),A.secondaries.datum(I).filter(function(a,b){return b<P.secondaries.length}).each(function(b,c){a.select(this).attr("class","secondary-container "+P.secondaries[c].valueString).call(P.secondaries[c].option)}),A.xAxis.datum(K).call(P.xAxis),A.navbar.datum(L).call(P.navbar),A.app.select("#navbar-reset").datum(M).call(v),A.app.select(".head-menu").datum(N).call(u),A.app.select("#selectors").datum(J).call(w),R&&(A.suspendLayout(!0),R=!1)}function e(){R=!0,c.util.layout(A,P)}function f(){a.select(window).on("resize",function(){e(),Q()})}function g(a){var b=[a[0],a[1]];H.viewDomain=b,I.viewDomain=b,K.viewDomain=b,L.viewDomain=b;var d=c.util.domain.trackingLatestData(H.viewDomain,H.data);H.trackingLatest=d,I.trackingLatest=d,L.trackingLatest=d,M.trackingLatest=d,Q()}function h(a){O.data=a,Q()}function i(){var a=H.data,d=b.util.extent().fields("date")(a),e=c.util.domain.moveToLatest(d,a,.2);g(e)}function j(a){y.select("#loading-message").classed("hidden",!a),y.select("#charts").classed("hidden",a)}function k(a){H.data=a,I.data=a,L.data=a}function l(a){N.selectedProduct=a,H.product=a,I.product=a,O.product=a}function m(a){N.selectedPeriod=a,K.period=a,O.period=a}function n(){return c.chart.primary().on(c.event.crosshairChange,h).on(c.event.viewChange,g)}function o(){return c.chart.nav().on(c.event.viewChange,g)}function p(){return c.menu.navigationReset().on(c.event.resetToLatest,i)}function q(){return c.data.dataInterface().on(c.event.messageReceived,function(a,b){if("error"===a.type||"close"===a.type&&1e3!==a.code)console.log("Error loading data from coinbase websocket: "+a.type+" "+a.code);else if("message"===a.type&&(k(b),H.trackingLatest)){var d=c.util.domain.moveToLatest(H.viewDomain,H.data);g(d)}}).on(c.event.dataLoaded,function(a,b){j(!1),a?console.log("Error getting historic data: "+a):(k(b),O.data=null,i(),e())})}function r(a){return c.menu.head().on(c.event.dataProductChange,function(b){j(!0),l(b.option),m(b.option.periods[0]),b.option===G?a(b.option.periods[0].seconds):b.option===F&&a.generateDailyData(),Q()}).on(c.event.dataPeriodChange,function(b){j(!0),m(b.option),a(b.option.seconds),Q()})}function s(a,b){b.forEach(function(a){a.isSelected=!1}),a.isSelected=!0}function t(){return c.menu.selectors().on(c.event.primaryChartSeriesChange,function(a){H.series=a,s(a,J.seriesSelector.options),Q()}).on(c.event.primaryChartIndicatorChange,function(a){a.isSelected=!a.isSelected,H.indicators=J.indicatorSelector.indicatorOptions.filter(function(a){return a.isSelected}),Q()}).on(c.event.secondaryChartChange,function(a){a.isSelected=!a.isSelected,P.secondaries=J.indicatorSelector.secondaryChartOptions.filter(function(a){return a.isSelected}),
// TODO: This doesn't seem to be a concern of menu.
P.secondaries.forEach(function(a){a.option.on(c.event.viewChange,g)}),
// TODO: Remove .remove! (could a secondary chart group component manage this?).
A.secondaries.selectAll("*").remove(),e(),Q()})}var u,v,w,x={},y=a.select("#app-container"),z=y.select("#charts-container"),A={app:y,charts:z,primary:z.select("#primary-container"),secondaries:z.selectAll(".secondary-container"),xAxis:z.select("#x-axis-container"),navbar:z.select("#navbar-container"),legend:y.select("#legend"),suspendLayout:function(a){var b=this;Object.keys(b).forEach(function(c){"function"!=typeof b[c]&&b[c].layoutSuspended(a)})}},B=c.model.period({display:"Daily",seconds:86400,d3TimeInterval:{unit:a.time.day,value:1},timeFormat:"%b %d"}),C=c.model.period({display:"1 Hr",seconds:3600,d3TimeInterval:{unit:a.time.hour,value:1},timeFormat:"%b %d %Hh"}),D=c.model.period({display:"5 Min",seconds:300,d3TimeInterval:{unit:a.time.minute,value:5},timeFormat:"%H:%M"}),E=c.model.period({display:"1 Min",seconds:60,d3TimeInterval:{unit:a.time.minute,value:1},timeFormat:"%H:%M"}),F=c.model.product({display:"Data Generator",volumeFormat:".3s",periods:[B]}),G=c.model.product({display:"Bitcoin",volumeFormat:".2f",periods:[E,D,C]}),H=c.model.primaryChart(F),I=c.model.secondaryChart(F),J=c.model.menu.selectors(),K=c.model.xAxis(B),L=c.model.nav(),M=c.model.navigationReset(),N=c.model.headMenu([F,G],F,B),O=c.model.legend(F,B),P={primary:void 0,secondaries:[],xAxis:c.chart.xAxis(),navbar:void 0,legend:c.chart.legend()},Q=b.util.render(d),R=!0;return x.run=function(){P.primary=n(),P.navbar=o();var a=q();u=r(a),v=p(),w=t(),f(),a.generateDailyData()},x}}(d3,fc,sc),function(a,b,c){"use strict";c.app().run()}(d3,fc,sc);